 --illegal-access=deny
  #mybatis:
     快速入门(maven工程里)
	1.在pom.xml文件中添加mybatis坐标
	2.编写传递数据的实体类(domin)记得implements Serializable
	3.编写dao接口,写方法
	4.编写dao接口的映射文件.xml
	<mapper namespace="接口的全类名">	//命名空间,忘了什么意思
	   <关键字 id=""(对应接口中的方法)
		  parameterType="''"(参数类型全类名)	
		  resultType="" (封装类型全类名)
		SQL语句<关键字/>

		*使用ognl表达式:#{对象.对象}
		接受简单值或者pojo属性值
	   </关键字>
	</mapper>
	5.编写SQLMapConfig.xml配置文件
--------------------------------------------------------------------
    快速入门:
	//1.读取配置文件
	InputStream is = Resources.getResourceAsStream("SqlMapConfig.xml");

	//2.创建 SqlSessionFactory 的构建者对象
	SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();

	//3.使用构建者创建工厂对象 SqlSessionFactory
	SqlSessionFactory factory = builder.build(is);

	//4.使用 SqlSessionFactory 生产 SqlSession 对象
	SqlSession session = factory.openSession();

	//5.使用 SqlSession 创建 dao 接口的代理对象
	IUserDao userDao = session.getMapper(IUserDao.class);

	//6.使用代理对象执行查询所有方法
	List<User> users = userDao.findAll();
	for(User user : users) {
	System.out.println(user);
	}

	//7.释放资源
	session.close();
	is.close();
	
	//*注意:模糊查询的&&在封装入参的时候加(防止SQL注入)
--------------------------------------------------------------------	
   parameterType配置参数:
	*mybaits 在加载时已经把常用的数据类型注册了别名，
	从而我们在使用时可以不写包名，而我们的是实体类并
	没有注册别名，所以必须写全限定类名。

	自定义别名：
	在 SqlMapConfig.xml 中配置：
	<typeAliases>
	  <!-- 单个别名定义 --> <typeAlias alias="user" type="com.itheima.domain.User"/>
	  <!-- 批量别名定义，扫描整个包下的类，别名为类名（首字母大写或小写都可以） --> <package   name="com.itheima.domain"/>
	  <package name="其它包"/>
	</typeAliases>


     OGNL表达式：
	Object Graphic Navigation Language
	对象	图	导航	   语言
	
	它是通过对象的取值方法来获取数据。在写法上把get给省略了。
	比如：我们获取用户的名称
		类中的写法：user.getUsername();
		OGNL表达式写法：user.username
	*若在parameterType中已经提供了属性所属的类，所以此时不需要写对象名

------------------------------------------------------------------------------

   SqlMapConfig.xml配置文件:

	-properties（属性）
	   --property

	  在classpath 下定义 db.properties 文件
	    	  然后在xml里配置<properties resource/url = "">

			*resource配置,要求配置文件必须在类路径下
			*url:协议+主机+端口+uri


	-settings（全局配置参数）
	   --setting


	-typeAliases（配置类型别名）
	   --typeAliase
	   --package
	例如:
	<typeAliases>
       	 <package name="com.itheima.domain"></package>
    	</typeAliases>


	-typeHandlers（类型处理器）
	-objectFactory（对象工厂）
	-plugins（插件）



	-environments（环境集合属性对象）	
	  --environment（环境子属性对象）	
	     ---transactionManager（事务管理）	JDBC
	     ---dataSource（数据源）		
	
	-mappers（映射器）
	  --mapper
	  --package

------------------------------------------------------------------
   mappers（映射器）
	<mapper resource=" " />
	    使用相对于类路径的资源
	    如：<mapper resource="com/itheima/dao/IUserDao.xml" />

	<mapper class=" " />
	    使用 mapper 接口类路径
	    如：<mapper class="com.itheima.dao.UserDao"/>
	    注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。 

	<package name=""/>
	    注册指定包下的所有 mapper 接口
	    如：<package name="cn.itcast.mybatis.mapper"/>
	    注意：此种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。

------------------------------------------------------------------ 

-----------------------------------------------------------------------

  连接池分类:
	UNPOOLED:不适用连接池
	POOLED:连接池
	JNDI

------------------------------------------------------------------

  事务控制
	在 CRUD 操作中，必须通过 sqlSession.commit()方法来执行提交操作。
	
	若要自动提交,在创建 SqlSession 对象时传入参数true
		session = factory.openSession(true);

------------------------------------------------------------------
  JNDI
	mocat模仿windows系统的注册表,键值对形式.

------------------------------------------------------------------
  缓存:
	<cache/>缓存只作用于 cache 标签所在的映射文件中的语句。启动全局的二级缓存
	任意语句中flushCache将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：true（对于 insert、update 和 delete 语句）。

---------------------------------------------------
----------------


备忘


-------------------------------------------------重要到爆炸

https://mybatis.org/mybatis-3/zh/sqlmap-xml.html

----------------------------------------------------------------

   resultType 配置结果类型
	* <resultMap> 标签可以建立查询的列名和实体类的属性名称
	不一致时建立对应关系。从而实现封装。
	
	type 属性：指定实体类的全限定类名
	id 属性：给定一个唯一标识，是给查询 select 标签引用用的。
  *实例
    <resultMap type="实体类全类名" id="引用名称">
   
	<id  	property="userId"  	column="id"/>  //映射属性
	<result property="userName"	column="username"/>
	<result property="userSex"	column="sex"/>

	<association property="user" javaType="user"> //映射关系
		<id property="id" column="id"></id>
		<result column="username" property="username"></result>
           ...
	</association>

	<collection property="accounts" ofType="account">//映射集合
            <id column="aid" property="id"></id>
            <result column="uid" property="uid"></result>
            ...
     </collection>
        
   </resultMap>

	对于关系和集合的select属性:
		<collection property="account" column="id" ofType="Account" select="findByUid"/>
		*把属性column的值传递给select值所对应的查询语句,得到的结果为以oftype值为元素的集合,集合的引用为property的值
	使用分级查询的时候,

	----------------------------------------------	

	对于不支持自动生成类型的数据库或可能不支持自动生成主键的 JDBC 驱动，MyBatis 有另外一种方法来生成主键	 selectKey 语句结果应该被设置的目标属性,也可以是逗号分隔的属性名称列表
	<selectKey keyProperty="id" resultType="int" order="BEFORE">
   	 select id+1 from account order by id DESC LIMIT 1;
	</selectKey>
	*order属性:如果设置为 BEFORE，那么它会首先生成主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句

	----------------------------------------------

  简化编写的SQL片段
	<!-- 抽取重复的语句代码片段 -->
	   <sql id="defaultSql">
		select * from user
	    </sql>

	<!-- 配置查询所有操作 -->
	   <select id="findAll" resultType="user">
		<include refid="defaultSql"></include>-----引用语句
	   </select>

	----------------------------------------------
  动态SQL
	*if:
	<if test="boolean类型值"></if>	test为true则显示标签内容

	*choose, when, otherwise:自带break效果
	<choose>
    		<when test="title != null">
      		AND title like #{title}
    		</when>
    		<when test="author != null and author.name != null">
     			AND author_name like #{author.name}
    		</when>
    		<otherwise>
      		AND featured = 1
    		</otherwise>
  	</choose>
	----------------------------------------------
	*trim, where, set
	*<where></where>:标签体内至少有一个子元素自动加where
		--可能会碰到where and ...的情况--不好用
	推荐用trim
	<trim prefix="WHERE" prefixOverrides="AND |OR ">
  	...
	</trim>

	*<set></set>:标签体内至少有一个子元素自动加set
	推荐用trim	//前置set,删去后缀,
	<trim prefix="SET" suffixOverrides=",">
  	...
	</trim>
	--------------------------------------------
	//遍历容器ids,前置"id in (" ,遍历元素uid,分隔符"," ,后置")"
	<foreach collection="ids" open="id in ( " close=")" item="uid" 
	separator=",">
		#{uid}
	</foreach>
	--------------------------------------------
	bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：
	<select id="selectBlogsLike" resultType="Blog">
 		<bind name="pattern" value="'%' + _parameter.getTitle() + '%'" />
 		SELECT * FROM BLOG
  		WHERE title LIKE #{pattern}
	</select>
	--------------------------------------------
	*script:要在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素
	@Update({"<script>",
      "update Author",
      "  <set>",
      "    <if test='username != null'>username=#{username},</if>",
      "    <if test='password != null'>password=#{password},</if>",
      "    <if test='email != null'>email=#{email},</if>",
      "    <if test='bio != null'>bio=#{bio}</if>",
      "  </set>",
      "where id=#{id}",
      "</script>"})
    void updateAuthorValues(Author author);
	------------------------------------------------
	多数据库支持
	------------------------------------------------
	动态 SQL 中的可插拔脚本语言
------------------------------------------------------------------
  鉴别器<discrimination>
	查询column的值,分别比较,和结果一致的行进行匹配
  <discriminator javaType="int" column="vehicle_type">
    <case value="1" resultMap="carResult"/>
    <case value="2" resultMap="truckResult"/>
    <case value="3" resultMap="vanResult"/>
    <case value="4" resultMap="suvResult"/>
  </discriminator>

------------------------------------------------------------------
  延迟加载	lazyLoadingEnabled=true	aggressiveLazyLoading=true
	*lazyLoadingEnabled	延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。	默认false
	*aggressiveLazyLoading	当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。	true | false	false （在 3.4.1 及之前的版本默认值为 true）

------------------------------------------------------------------
  缓存:
	一级缓存存在sqlsession对象里: 多次引用,是引用同一个对象(对象已存在)
		*同一个sqlsession,第二次查询已查询过的内容直接引用一级缓存
	二级缓存存在sqlfactory对象里: 多次引用,不是同一对象,但是数据相同(引用时生成对象)
	   使用步骤:
		1.让mybatis框架支持二级缓存(默认支持,cacheEnabled="true")
		2.让当前的映射文件支持二级缓存(<cache/>)
		3.让当前操作支持二级缓存(操作标签里属性usecache="true")
		*同一个sqlfactory获取的不同的sqlsession,重复查询,在二级缓存里查















