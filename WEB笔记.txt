软件架构：
       1.C/S：客户端/服务器
	优点：
	     1.用户体检好
	缺点：
	     1.发开，安装，部署，维护麻烦
       2.B/S：浏览器/服务器
	优点：
	     1.发开，安装，部署，维护简单 
	缺点：
	     1.如果应用过大，用户的体验可能会受到影响.
	     2.对硬件要求过高
HTML：
       1.文件标签
	*html：根标签
	*head：头标签，引入外部的资源
	*title：标题标签
	*body：体标签
	*<!doctype>:定义文档类型
       2.文本标签
       3.图片标签<img src=""/>
       4.列表标签
	*有序列表<ol></ol>
	*无需列表<ul></ul>
       5.超链接标签 <a href=""></a>
       6.块标签
	*<div></div> 	//块级标签
	*<span></span>   	//内联标签，文本信息默认在一行展示
       7.语义化标签:html5中为了可读性提供的
	*<header>:页眉
	*<footer>:页脚
       8.表格标签:
	*<table>
	*<tr>行
	*<td>单元格
	*<th>表头单元格
	*<thead>头,类似于语义化 标签
       9.表单标签
	*<form>:定义表单范围
	*<input>（自闭合）
	         type:
		1.text：文本输入框
			*placeholder属性：指定为输入框的提示信息
		2.password：密码输入框
		3.radio：单选框
		4.checkbox：复选框
		            ps：对于3.4
			name属性要相同
			最好给value
		5.file：文件
		6.hidden：隐藏域，用于
		6.sbmit：提交表单
		7.buttun：普通按钮
		8.image：图片提交按钮
		9.color：取色器
		10.date：日期
		11.datetime-local：
		
	*<label>:指定输入项的文字描述信息
		*label的for属性一般会和input的ID属性值对应.如果对应了,则点击label区域.会让input输入框获取焦点
	
	*<select>下拉列表
	       <option></option>
		
	*<textarea>文本域
	属性:
	      action：指定提交数据的URL
	      method：指定提交方式
		get：1.封装到请求行中。2.请求参数大小有限制。3.不太安全
		post：1.封装到请求体中。2.请求参数的大小没有限制。3.较为安全


CSS:Cascading Style Sheets层叠 样式表
      CSS语法:
	*选择器{
		属性名1:属性值1;
		属性名2:属性值2;
			.
			.
	}	
      选择器
            1.基本选择器// 	优先级从上到下
	1.id选择器：选择具体id属性值
		*语法：#id属性值{}
	2.class选择器
		*语法：.class属性值{}
	3.元素选择器：
		*语法：标签名称{}
            2.扩展选择器
	1.选择所有元素：*{}
	2.并集选择器
		选择器1,选择器{}
	3.子选择器：筛选选择器1下的选择器2
		选择器1 选择器2{}
	4.父选择器：筛选选择器2的父选择器1
		选择器1>选择器2
	5.属性选择器：选择元素名称，属性名=属性值的元素
		元素名称[属性名=“属性值”]{}
	6.伪类选择器：选择一些元素具有的状态
		语法：
			标签名称：状态{}
		如：<a>
		link：初始状态
		hover：鼠标在其之上
		active：点击
		visited：已访问
      属性

JavaScript：一门客户端脚本语言
      基本语法：
	1.与html结合方式
	      1.内部js：
		*定义<script>js代码</script>,
	      2.外部js：
		*定义<script></script>,通过src属性引入外部 js文件
	2.注释
	3.数据类型：
	       1.原始数据额类型（基本数据类型）
		1.number：数字。   整数/小数/NAN
		2.string：字符串。   “”或‘’都可以，没有char
		3.boolean：
		4.null：一个对象为空的占位符
		5.undefined：未定义。

	        2.引用数据类型：对象

	4.变量
	       *JavaScript是弱类型语言。
	  
      	       *语法：
		var 变量名 =初始化值；
	5.运算符
	       1.一元运算符：++，--，+
		string转number，按字面值转换，如果不是数字，则转换为NAN
		boolean转number，true转1，false转0；
	       2.算数运算符
	       3.赋值运算符
	       4.比较运算符：>,<,>=,<===,===
		1.类型相同直接比较，
			*字符串，按字典顺序比较。按位逐一比较，知道得出大小为止。
		2.类型不同，先进行转换在比较
			*===，全等于。在比较之前，先判断类型。类型不一样直接返回false
	       5.逻辑运算符:&&，||，！，
		其他类型转boolean
			1.number：0或NaN为假,其他为真
			2.string：除了空字符串 （“”），其他都是true
			3.null&undefined：都是false 
			4.对象：除了空指针，所有对象都是true
	       6.三元运算符
		表达式？ 值1：值2；
	6.特殊语法
	        定义变量时可以不写  var
		写var：代表局部变量
		不写var：代表全局变量

	7.流程控制语句：
		*在java中，switch可以接收
		*JavaScript中switch可以接收任意原始数据类型
      基本对象：
	1.Function：函数（方法）对象
	        1.创建：
		1.function 方法名称（形式参数列表）{方法体}
		2.var 方法名称 = function（形式参数列表）{方法体}
	        2.方法
	        3.属性
		length：参数个数
	        4.特点：
		1.方法定义时，形参的类型不用写，返回值类型也不写
		2.方法是一个对象 ，定义相同的方法，后面的会覆盖前面的
		3.js中，方法 的调用只和 方法的的名称有关，和参数列表无关
		4.在方法声明中有一个隐藏的内置对象（数组），arguments，封装所有的实际参数

	2.Array：数组对象
	        1.创建：
		1.var 数组名称=new Array（元素列表）
		2.var 数组名称 =new Array（默认长度）
		3.var 数组名称 =[元素列表]
	        2.方法
		*join（分隔符）：将数组中的元素按照指定的分隔符拼接为字符串
		*push（添加的元素）：添加元素
	        3.属性
		length：数组的长度
	        4.特点：
		1.js中，数组元素的类型可变
		2.js中，属猪长度可变
		
	4.Date：日期对象
	        1.创建：
		1.var 数组名称=new Date（）；
	        2.方法
		*toLocalString（）：返回当前date对象对应的 时间本地字符串格式
		*getTime（）：获取毫秒值
	        3.属性
	        4.特点：

	5.Math：数学对象
	        1.创建：不用创建，直接使用
	        2.方法
	        3.属性
	        4.特点：
		
	6.RegExp：正则表达式对象
	         1.正则表达式：定义字符串的组成规则
		1.单个字符：[]
		      如     [a]    [ab]    [a-zA-Z0-9_]
		       *特殊符号代表 特殊含义的单个字符
			\d：单个数字字符[0-9]
			\w：单个单词字符[a-zA-Z0-9_]
		2.量词符号:
		    	?：表示出现0次或者1次
			*：表示出现0次或者多次
			+：出现1次或者多次 
			{m，n}：表示   m<=数量<=n
				*m若果缺省：{，n}最多n次
				*n若果缺省：{m，}最少m次
		3.开始结束符号
			^开始
			$结束
	        2.创建：
		1.var 对象名称 = new RegExp("正则表达式");
		2.var 对象名称 = /正则表达式 /;
	        3.方法
		1.test(参数)：验证指定的字符串是否符合正则定义的规范
	7.Global：对象
	        1.创建：不用创建，直接使用
	        2.方法：
		encodeURI():url编码
		decodeURI():url解码

		encodeURIComponent():url编码, 编码的字符更多 (例如 ?,/)
		decodeURIComponent():url解码

		parseInt():将字符串转换为数字
			*逐一判断,知道不是数字
		isNaN():判断一个值是否是NaN
			*(NaN==NaN )的 值为false
		eval():解析字符串

	        3.特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。
	        4.URL编码：
------------------------------------------------------------------------------------------------

BOM：Browser    object   Model浏览器对象模型 




      3.window 窗口对象
	    1.创建	
	    2.方法：
	       1.于弹出框有关的方法：
		alert()	显示带有一段消息和一个确认按钮的警告框.
		confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框.
			*如果点确认,return true.   点取消,return false
		prompt()	显示可提示用户输入的对话框.
			*返回值:获取用户输入的值
	       2.与开发关闭有关的 方法:
		close(),关闭浏览器窗口
			*谁调用关谁
		open()打开一个新的浏览器窗口
			*返回新的window对象
	      3.与定时器有关的方法
		//一次性的定时器
		var id =  setTimeout(“js代码”，毫秒值)；-------“js代码”可以直接用方法名代替
		//取消一次性定时器
		clearTimeout(id)
		//循环定时器
		var id =  setInterval(“js代码”，毫秒值)
		//取消循环定时器
		clearInterval(id)
	3.属性:
	       1.获取其他BOM对象
		history
		location
		Navigator
		Screen
	        2.获取DOM对象
		document
	4.特点:
	        1.window不需要创建可以直接使用.     window.方法名();
	         2.window引用可以省略。直接使用        方法名()

      4.location：地址栏对象
	1.创建：	window.location
	2.方法: 	*reload() 	重新加载（刷新）
	3.属性:	href

      5.history：历史记录对象
	1.创建：	window.history
	2.方法：
	         *back()	加载history列表中的前一个URL
	         *forward()	加载history列表中的下一个URL
	         *go(参数)	加载history列表中某一个具体页面
		参数
		      *正数---前进几个
		      *负数---后退几个
	3.属性:
	         *length	当前窗口列表 中的url数量

--------------------------------------------------------------------------------------------------
DOM:Documented Object Model文档对象模型
      *Document:文档对象
	1.创建：html dom模型中可以使用window对象来获取
		1.window.document
		2.document
	2.方法：
	    1.获取Element对象
		1.getElementById（）
		2.get...TagName()
		3.get...ClassName()
		4.get...Name()
	    2.创建其他DOM对象
		createAttribute(name)
		createComment()
		createElement()
		createTextNode()
      
	1.获取页面标签（元素）对象 Element
    	     *document.getElementById（“id值”）：通过元素id获取 元素对象
	2.操作Element对象：
	      1.修改属性值：
		1.明确获取的对象是哪一个？
		2.查看API文档，找其中有哪些属性可以设置
	      2.修改标签体内容 ：
		*属性：innerHTML

	3.属性
      *Element:元素对象
	方法
		1.删除属性
		2.设置属性
      *Node:节点对象	
	方法:
		对子节点的处理
	属性:
		父节点


==================================================================================

1.事件
	      *功能：某些组件被执行了某些操作 之后，触发某些代码的执行。
	  绑定事件
	       1.直接在html标签上，绑定事件的属性
		 onclick=“”------单击事件
	       2.通过js获取元素对象，指定事件属性，设置一个函数。
	




=====================================================================================
Bootstrap框架:
	1.定义了很多的css样式和插件
	2.响应式布局

     快速入门
	1.下载Bootstrap
	2.在项目中将这三个文件夹复制

======================================================================================
XML
	1.概念：Extensible Markup Language 可扩展标记语言
		*可扩展：标签都是自定义的。
	2.功能：
		1.配置文件
		2.在网络中传输
	3.xml和html的区别

	*W3C：万维网联盟
	
	
	组成部分
	  1.文档声明
		1.格式<?xml 属性列表?>
		2.属性列表
		   *version:版本号
		   *encoding:编码方式
		   *standalone:是否独立
	   2.指令
	   3.标签
	   4.属性
		ID属性唯一
	   5.文本:
		*CDATA区:该区域中的数据会被原样展示
			*格式:<![CDATA[内容]]>

	*约束:

	   *分类:
		1.DTD:
		   *引入dtd文档到xml文档中
			*内部dtd:
			*外部dtd:
				*本地:<!DOCTYPE 根标签名 SYSTEM "dtd文件的位置">
				*网络:<!DOCTYPE 根标签名 PUBLIC "dtd文件名字""dta文件的位置URL">
		2.Schema:
		   *引入:
			1.填写xml文档的根元素
			2.引入xsi前缀.  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	//标准
			3.引入xsd文件命名空间.xsi:schemaLocation="命名空间   文件名.xml"
			4.为每一个xsd约束声明一个前缀,作为标识 xmlns="命名空间 "
	*解析:
	     方式:
		1.DOM:在内存中形成dom树
		2.SAX:逐行读取,基于事件驱动的

	     xml常见解析器
		1.JAXP:支持dom和sax
		2.DOM4J:基于DOM思想
		3.Jsoup:通过DOM
		4.PULL:Android操作系统内置的解析器,sax方式的.

	*Jsoup:
	     快速入门:
		1.导入jar包
		2.1获取Document对象
			String path=XXX.class.getClassLoader().getResource(name.xml).getPath();
		2.2.解析xml文档,加载文档进内存,获取dom树--->Document
			Document document=Jsoup.parse(new File(path),"编码格式")
		3.获取元素对象 Element
			Elements element=document.getElementsByTag("标签名");
			
		4.获取数据
	     
    	      *对象的使用
		1.Jsuop:工具类
			*parse():解析html或xml文档,返回Document
			
		2.Document:文档对象.代表内存中的dom树
		3.Elements:元素Element对象的集合.可以当做Arrylist<Element>集合
		4.Element:元素对象:
			1.获取子元素对象
			2.获取属性值
			*attr(String Key):根据属性名称获取属性值
			3.获取文本内容
			*String text():获取文本内容
			*String html():获取标签体所有内容(包括标签体和字符串内容)

		5.Node:节点对象
			*是Document和Element的父类
	*快捷查询方式
		1.selector:选择器
			*document.selector("选择器格式")
		2.Xpath
		   1.使用Jsoup的Xpath需要额外导入jar包
		   2.使用
			1.获取xml的path
			2.获取Document对象
			3.根据document对象,创建JXDocument对象
			4.根据Xpath语法查询
				*//所有
				*/子标签
				*[@属性]

========================================================================================
web服务器软件
	*常见的java相关的web服务器软件
		*webLogic
		*webSphere
		*JBOSS
		*Tomcat:Apache基金组织,中小型的javaEE,仅仅支持少量的JavaEE规范servlet/jsp.开源的,免费的
	*JavaEE:Java语言在企业级开发中使用的技术规范的总和,一共13项.
	
	*Tomcat:web服务器软件
		1.下载:http://tomcat.apache.org/
		2.安装:解压压缩包即可
		3.卸载:删除目录就行
		4.启动:
			*bin/startup.bat
			*访问:浏览器输入:ip:端口号(默认8080)
			*可能遇到的问题
			    1.黑窗口一闪而过:
				*原因:没有正确配置JAVA_HOME环境变量
			    2.启动报错
				端口号冲突
				*一般会将Tomcat的默认端口号修改为80,80端口号是http协议的默认端口号	
		5.关闭
			1.正常关闭:
				bin/shutdown.bat
				Ctrl+c
			2.强制关机:
				*点击X
		6.配置
			*部署项目的方式:
			    1.直接将项目放到webapps
				可以将项目打包成一个war包,再讲war包放置到webapps目录下
					*war包会自动解压

			    2.配置conf/server.xml文件(不推荐)
				在<Host>标签体重配置
				<Context docBase="项目存放路劲" path="虚拟目录">

			    3.在conf\Catalina\localhost创建任意名称的xml文件.在文件中编写(推荐)		//热部署
				<Context docBase="项目存放目录"/>
				*虚拟目录:xml文件的名称

    IDEA与tomcat的相关配置
	1.IDEA会为每一个tomcat部署的项目单独建立一份配置文件
		*查看控制台的log:using CATALINA_BASE:  "位置"
	2.工作空间项目     和    tomcat部署的web项目
		*tomcat真正访问的是"tomcat部署的web项目", "tomcat部署的web项目" 对应着 "工作空间项目" 的web目录下的所有资源
		*WEB-INF的资源不能被浏览器直接访问.
		*断点调试:使用"小虫子"启动 debug启动

--------------------------------------------------------------------------------------------------

Servlet:server applet
    运行在服务器的小程序
	*Servlet就是一个接口,定义了java类被浏览器访问到(Tomcat)的规则
	*将来我们自定义一个类,实现Servlet接口,复写方法

    快速入门:
	1.创建javaEE项目
	2.定义一个类,实现Servlet接口
	3.实现接口中的抽象方法
	4.配置Servlet
		在web.xml中的配置
		<servlet>
			<servlet-name>名字</servlet-name>
			<servlet-class>类的位置<servlet-class>
		</servlet>	

		<servlet-mapping>
			<servlet-name>名字<servlet-name>
			<url-pattern>/资源路径(可以配置多级路径)</url-pattern>
		</servlet-mapping>

	Servlet3.0:
	     好处:
		*支持注解配置。

	     可以不创建web.xml配置文件.直接在在类上使用@WebServlet注解进行配置
		*@WebServlet(urlPattern="资源路径") 	//urlPattern=可以省略不写,可以配置多个资源路径

     体系结构:
	Servlet接口
	
	GenericServlet--抽象类		//将Servlet接口中的其他的方法做了默认的实现,只留

	HTTPServlet--抽象类		//对http协议的一种封装,简化操作
		doGet();			doPose();
	
      
==================================================================================================

HTTP:超文本传输协议(Hyper Text Transfer Protocol)
    特点:
	1.基于TCP/IP的高级协议
	2.默认端口号:80
	3.基于请求/响应模型	:一次请求对应一次响应
	4.无状态的:每次请求之间都是相互独立的,不能交互数据

    请求消息数据格式
	1.请求行
		请求方式  请求url  请求协议/版本.

	*请求方式:
		*GET:请求参数在请求行中,	长度有限	不安全
		*POSE:请求参数在请求体中,	长度没有限制	相对安全一点点
	2.请求头:客户端浏览器告诉服务器一些信息
		请求头名称:请求头值
		*常见的请求头
		1.User-Agent:浏览器告诉服务器,我访问你使用的浏览器版本
		2.Referer:告诉服务器,我(当前请求)从哪里来?
		    作用:
			1.防盗链
			2.做统计
		3.
	3.请求空行
		分割2.3
	4.请求体(正文)
		*封装POST请求消息的参数



    响应消息数据格式
	1.响应行
	    1.组成:协议/版本  响应状态码    状态码的描述
	    2.响应状态码: 服务器告诉客户端浏览器本请求和响应 的一个状态
		1.状态码都是3位数字
		2.分类
		     1.1xx:服务器接收客户端消息,但没有接收完成,等待一段时间后,发送1xx多状态码 
		     2.2xx:成功. 代表200
		     3.3xx:重定向。代表302（重定向）：。304：访问缓存
		     4.4xx：客户端错误。代表404（请求路径没有对应的资源）。405（访问方式没有doxxx方法）
		     5.5xx：服务器端错误。代表500（服务器内部异常）
	2.响应头
	    1.格式：头名称：值
   	    2.常见的响应头:
		1.Content-Type:服务器告诉客户端本次响应体数据格式以及编码格式
		2.Content-disposition:服务器告诉客户端以书面格式打开响应体数据
		    *值
			*in-line:默认
			*attachment;附件形式 
	3.响应空行
	4.响应体

	


	1.request对象和response对象由服务器创建的.我们(程序员)来使用他们

	2.request对象继承体系结构:
		ServletRequest----接口
			继承
		HTTPServletRequest---接口
			实现
		org.apache.catalina.connector.RequestFacade 类	(tomcat)



	3.resquest功能:
		1.获取请求消息数据
			1.获取请求行数据
			*
			*方法
				1.获取请求方式:GET
				*String getMethod()
				2.(*)获取虚拟目录:
				*String getContextPath()
				3.获取Servlet路径
				*String getServletPath()
				4.获取get方式请求参数:
				*String getQueryString()
				5.(*)获取请求URI
				*String getRequestURI()
				*StringBuffer getRequestURI()  


				*URL:统一资源定位符: http://
				*URI:定义资源标识符: /
				6.获取协议及版本:
				*String getProtocol()
				7.获取客服机的IP地址
				*String getRemoteADDr()
			2.获取请求头数据
			   方法:
				*(*)String getHeader(String name):通过请求头名称获取请求值的头
				*
			3.获取请求体数据

		2.其他功能
			1.获取请求参数通用方式:
				1.(*)String getParameter(String name):根据参数名称获取参数值
				2.String[] getParameterValues(String name):根据参数名称获取参数值的数组
				3.Enumeration<String> getParameterNames():获取所有请求的参数名称
				4.(*)Map<String, String[]> getParameterMap():获取所有参数的map集合
			
				*中文乱码问题:
					*get方式:tomcat已经结解决
					*post方式:会乱码
						在获取参数前,设置request的编码	//在doPost中设置流的编码   request.setCharacterEncoding("编码格式")

			2.请求转发:一种在服务器内部的资源跳转方式
			   1.步骤:
				1.通过request对象获取请求转发器对象:RequestDispatcher getRequestDispatcher(String path)
				2.使用RequestDispatcher对象来进行转发:forward(ServletRequest request,ServletResponse response)
				
			   2.特点:
				1.浏览器地址栏路径不发生变化
				2.只能转发到当前服务器内部资源中
				3.转发是一次请求
				
			3.共享数据:
				*域对象:一个有作用范围的对象,
				*request域:代表一次请求范围,一般用于请求转发的多个资源中的共享数据
				*方法:
					1.setAttribute(String name,Object obj):存储数据到request域中
					2.Object getAttitude(String name):通过键获取值
					3.void removeAttribute(String name):通过键一处键值对

			4.获取ServletContext
				*ServletContext getServletContext():获取ServletContext对象


	response对象:
	   *功能:设置响应消息
		1,设置响应行
		2.设置响应头
		3.设置响应体
			1.获取输出流:PrintWriter ()
			2.使用输出流,将数据输出到客户端浏览器

	    案例:
		1.完成重定向: 
			*.设置状态码,设置响应头

			*简单的重定向方法:response.sendRedirect("")

		     *重定向的特点
		2.服务器输出字节数据到浏览器
		    *步骤
			//0.设置编码格式
			//1.获取字符输出流
			//2.输出数据
		3.服务器输出字节数据到浏览器
			//0.设置编码格式
			//1.获取字节输出流
			//2.输出数据
		4,验证码
			1.本质:图片
			2.目的:防止恶意注册
 
	路径:虚拟目录推荐使用动态获取	//request.getContextPath()
	
	
	*ServletContext对象
	   1.概念 :代表整个web应用,可以和程序的容器(服务器)来通信
	   2.获取:
		1.通过request对象获取
		   request.getServletContext();
		2,通过HTTPServlet获取
		   getServletContext();
	   3.功能:
		1.获取MIME类型:
			*MINE类型:在互联网通信过程中定义的一种文件数据类型
				*格式:大类型/小类型	text/html	image/jpeg
			*获取: String getMimeType(String file)
			
		2.域对象:共享数据
			1.setAttribute()


			
			*ServletContext对象范围:所有用户所有请求的数据
		3.获取文件的真实(服务器)路径
			1.方法:getRealPath("")
		

		*案例:文件下载


		步骤:
			1.定义页面.超链接href属性.指向servlet,用?xxx=""的形式传递资源名称
			2.定义servlet
				1.获取文件服务器路径
				2.使用字节输入流加载文件进内存
				3.指定response的响应头:1. 设置响应头类型 content-type,
							2. 设置响应头的打开方式content-disposition:
				4.将数据写出到response.getOutputStream
-----------------------------------------------------------------------------
		实现案例:

			//1.获取请求参数,文件名称
			  String filename = request.getParameter("filename(属性名称)")
			//2.使用字节输入流加载文件进内存
			//2.2.找到文件 服务器路径
			  ServletContext servletcontext = this.getServletContext()
			  String realPath = servletcontext.getRealPath("本地路径")
			//2.2.用字节流关联
			   FileInputStream fis = new FileInputStream(realPath)
----------------------------------------------------------------------------------------
			//3.设置response的响应头
			//3.1设置响应头类型 content-type
			   response.setHeader("content-type",mineType);
			//3.2设置响应头的打开方式:content-disposition
			   response.setHeader("content-disposition","attachment;filename="+filename)
---------------------------------------------------------------------------
			//*解决中文文件名问题
			//1.获取user-agent请求头
			   String agent = request.getHeader("user-agent")
			//2.使用工具类方法 编码文件名即可
			   filename = DownLoadUtils.getFileName(agent,filename)
--------------------------------------------------------------------------------------
			//4.将输入流的数据写到输出流中
			   ServletOutputStream sos = response.getOutputStream()
			   byte[] buff = new byte[1024]
			   int len = 0;
			   while((len = fis.read(buff) != -1)){
				sos.write(buff,0,len);
			   }
				
			     fis.close();
===========================================================================================

###会话技术

??修改代码模板??	code template

  ##Cookie:
	1.快速入门:
		1.创建Cookie对象,绑定数据
		   *new Cookie (String name,String value)
		2.发送Cookie对象
		    *response.addCookie(Cookie cookie)
		3.获取Cookie,拿到对象
		    *Cookie[] request.getCookies()
	2.实现原理:
		基于响头set-cookie和请求头cookie实现

	3.cookie的细节
		1.一次可以发送多个cookie
		2.cookie的生命周期
		    *setMaxAge(int second)	
			1.正数:写到硬盘,存活时间,s
			2.负数:默认值
			3.零:删除cookie
		3.tomcat8.0之后可以存中文数据
			*URL编码
		4.cookie获取范围:
			*默认不同web项目间不能共享
			//同服务器,不同web项目
			*setPath(String path)设置cookie的默认范围,此路径下可以共享
			//不同服务器
			*setDomain(String path):如果设置一级域名相同,name  多个服务器之间cookie可以共享

				例如:setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com可以共享

	4.cookie的特点:
		1.cookie存储数据在客户端
		2.浏览器对于单个cookie的大小有限制(4kb)以及对统一域名下的总cookie数量也有限制
		
		*作用:
			1.cookie一般用于存储少量的不太敏感的 数据
			2.在不登录的情况下 ,完成服务器对客户端的身份识别

  ##JSP:
	1.概念:	Java Servlet Pages
		*可以用html标签,又可以写java代码,目的是简化书写(前后端耦合)
	
	2.原理:
		*本质上是个Servlet	// .jsp → .java → .class(HTTPJSPBase)

	3.JSP的脚本:
		1.<%  代码  %>:相当于在servive方法中
		2.<%! 代码  %>:在jsp转换后的java类的成员位置(成员变量 /成员方法/ 静态代码块 / 内部类)
		3.<%= 代码  %>:输出到页面上的内容.输出语句可以定义什么,该脚本中就可以定义什么

	4.JSP内部对象:
		*在剪视频页面中不需要获取和创建,可以直接使用的对象
		*jsp一共有9个内置对象
			1.request
			2.response
			3.out:用于输出,推荐

		*内置对象详细
			 对象变量名	 真实类型	  	作用范围

			*pageContext	pageContext		当前页面共享数据
			*request	HttpServletRequest	一次请求访问多个资源	
			*session	HttpSession		一次会话的多个请求间
			*application	ServletContext		所有用户间共享数据
			*response	HttpservletResponse	
			*page		object			当前页面的对象
			*out		JspWriter		
			*config		ServletConfig		Servlet的配置对象
			*exception	Throwable		异常对象



		    *response缓冲区优先于out缓冲区


	5.指令:
		*作用:用于配置JSP页面,导入资源
		*格式:
			<%@ 指令名称 属性名1=属性值2 属性名2=属性值2 ...% >
		*分类:
			1.page		: 配置JSP页面
			     *contentType:等同于response.setContentType()
				1.设置响应体的mime类型以及字符集
				2.设置当前jsp页面的编码(只能是高级的IDE才能生效,如果使用低级工具,则需要设置pageEncoding属性设置当前页面的字符集)
			     *import :导包
			     *errorPage:当前页面发生异常后,会自动跳转到指定的错误页面
			     *isErrorPage:标识当前页是否是错误页面(默认false,只有为true才能使用内置对象exception)


			2.include	: 页面包含的.导入页面的资源文件
				*<%@include file="投票.jsp"%>

			3.taglib	: 导入标签资源
				*<%@ taglib prefix="c" uri="http:java.sun.com/jsp/jstl/core" %>

		*注释
			1.html注释:只能注释html代码片段
			2.jsp注释:推荐使用
			  <%--  注释  --%>:可以 注释所有
		*内置对象


   ##Session
	1.概念:服务器端回话技术,在一次会话的多次请求间共享数据,将数据保存在服务器端的对象中.HttpSession
	
	2.快速入门
		1.从request中获取HttpSession对象
		2.使用HttpSession对象
			1.get
			2.set
			3.remove
	3.原理
		*Session的实现是依赖 于Cookie的.(通过Cookie储存Session地址)

	4.细节
		1.客户端重启,服务器不重启,两次获取的session是同一个吗
		   *默认情况,  不是
		   *如果需要,可以自己创建相应生命周期的Cookie,保存session地址
			Cookie c = new Cookie ("JSESSION",session.getId)

		2.客户端不关闭,服务器关闭后两次获取的session是同一个吗
		   *不是
		   *但是要确保 数据不丢失的话,进行钝化和活化
			session的钝化:
				*在服务器正常关闭之前,将对象序列化到硬盘上
			session的活化:
				*在服务器启动后,将session文件转化为内存中的session对象即可

		3.session什么时候被销毁
			1.服务器关闭
			2.手动销毁
			3.session默认销毁时间(30min)
				选择性配置 修改  在web.xml中session-config 中的session-timeout
	5.session的特点 
		1.用于存储一次会话多次请求的数据,存在服务器端(相对安全)
		2.可以存储任意类型,任意大小的数据
		
		

   ##MVC:开发模式
	1.M : Model	 模型	JavaBean
		*完成具体的业务操作
	2.V : View 	 视图	JSP
		*展示数据
	3.C : Controller 控制器	Servlet
		*获取用户的输入
		*调用模型
		*将数据交给视图进行展示

--------------------------------------------------------------------------------

    ##EL表达式	//Expression Language
	1.作用:替换和简化jsp页面中的java代码的编写
	2.语法:${表达式}
	3.注意:
		需要在jsp指令中设置忽略EL表达式
		isELIgnored="false"
	4.使用 :
	   1.运算
		*特有的空运算符:empty
		*功能: 用于判断字符串、集合、数组对象是否为null并且长度是否为0
			*${empty list}
	   2.获取
		1.el表达式只能从域对象中获取值
		2.语法:
			1.${域名城.键名}: 从指定域中获取指定键的值	//若只写键名则从小域到大域顺序查找是否有该键值对
				*域名称:
				1.pageScope		-->pageContext域
				2.requestScope		-->request域
				3.sessionScope		-->session域
				4.applicationScope	-->application域
			2.获取对象   List集合   Map集合的值
				1.对象:  ${域名称.键名.属性名}
					*本质上是去调用对象的getter方法

				2.List集合:${域名称.键名[索引]}
	
				3.Map集合 : 
					* ${域名称.键名.key名称}
					* ${域名称.键名["key名称"]}

		3.隐式对象:
			*el表达式中有 11个隐式对象
			*pageContext:
			   获取jsp其他八个内置对象

  $$ JSTL
	1.概念:  JavaServer Pages Tag  Library   JSP标准标签库
	
	2.作用: 用于简化和替换jsp页面上 的java代码

	3.使用步骤:
		1.导入jstl相关jar包
		2.引入标签库: taglib指令:  <%@ taglib %>
		3.使用标签
	
	4.常用的JSTL标签
		1.if
		     1.属性:
			*test  必须属性 ,接受boolean表达式.

		2.choose:
			1.使用choose标签声明			相当于switch声明
			2.使用when标签做判断			相当于case
			3.使用otherwise标签做其他情况声明	相当于default

		3.foreach:相当于Java代码的for语句
			属性:
				*begin : 开始值
				*end : 结束值
				*var : 临时变量
				*step : 步长
				*varStatus : 循环状态对象
				    属性
					*index  : 对于增强for来说类似于索引,从零开始.  对于规定次数的循环,等于var
					*count  :  循环次数

   
   ##三层架构:软件设计架构
	1. 界面层 (表示层):  用户看的到的界面
	2. 业务逻辑层:处理业务逻辑
	3. 数据访问层:

		    |						web服务器				|
		    |											|
	浏览器 	 -->||	  	SpringMVC框架	   |		Spring框架		  MyBatis框架	|
		    ||	    界面层(web) 	   |	-->  业务逻辑层(service)  -->   数据访问层(dao)	|   -->  DateBase
		    ||				   |							|
		    || 视图(JSp)--> 控制器(servlet)|							|



	##设计案列
		1.技术选型
		2.DataBase设计
		3.开发
			3.1环境搭建
			3.2写代码
		4测试
		5部署运维
-----------------------------------------------------------------------------------------------

   ##Filter:过滤器
	快速入门:
		1.定义一个类实现接口Filter  (javax包下)
		2.复写方法 : 
			放行:filterChain.doFilter();
		3.配置拦截路径
			1.注解配置 : @WebFilter("/*")
			2.xml配置  : 

	细节:
		1.web.xml配置:
			 <filter>	<filter-name>xxx</filter-name>	<filter-class></filter-class>	</filter>
			 <filter-mapping><filter-name>xxx</filter-name><url-pattern></url-pattern></filter>

		2.执行流程:
			//对request对象请求消息增强(请求时经过过滤器)
			//放行
			//对response对象的响应消息增强(服务器响返回消息时经过滤器)

		3.生命周期方法:
			init	 : 在服务器启动后,会创建Filter对象,然后调用init方法一次
			
			doFilter : 每次访问拦截路径时都会执行			

			destroy  : 在服务器正常关闭时,执行destroy方法一次

		4.配置详解
		   *拦截路径配置
			1.具体资源路径	: /index.jsp
			2.拦截目录	: /day17/*
			3.后缀名拦截	: *.jsp  访问所有后缀名为jsp资源时,过滤器都会执行
			4.拦截所有资源	: /* 
		   *拦截方式配置 : 资源被访问的方式
			*注解配置: 
			     *设置dispatcherTypes属性	(可以配置多个值)//dispatcherTypes = {DispatcherType.属性值 , ...}
				1.REQUEST : 默认值.只有浏览器直接请求资源时拦截
				2.FORWARD : 转发访问资源
				3.INCLUDE : 包含访问资源
				4.ERROR   : 错误跳转资源
				5.ASYNC   : 异步访问资源
			*web.xml配置:
				*设置dispatcherTypes标签

		5.过滤器链
	   	    *执行顺序:如果有两个过滤器:过滤器1和过滤器2
			过滤器1 -> 过滤器2 -> 资源 -> 过滤器2 -> 过滤器1

		    *过滤器先后顺序:
			1.注解配置: 按照类名的字符串比较规则比较,值小的先执行
			
			2.web.xml配置: 配置文件中的<filter-mapping>标签的先后顺序
			
-----------------------------------------------------------------------------------------------
  ###  Listener监听器
    事件监听机制:
	*事件: 一个事情
	*事件源: 事情发生的地方
	*监听器:一个对象
	*注册监听:将事件,事件源,监听器绑定在一起.当事件源上发生某个事件后,执行监听器代码

   *ServletContextListener:监听ServletContext对象的创建和销毁
	方法:
		*void contextDestroyed
		*void contextInitialized
	步骤
		1.定义一个类,实现ServletContextListener接口
		2.复写方法
		3.配置
			1.web.xml
				<listener>
				<listener-class>
				
			     *配置初始化参数<context-param>	//src中的文件在tomcat中是在WEB-INF/classes/下
			2.注解:
			  *@WebListener
-----------------------------------------------------------------------------------------------
  ##设计模式:
     代理模式:
	1.动态代理
	   概念:
		1.真实对象: 被代理的对象
		2.代理对象: 
		3.代理模式: 代理对象代理真实对象,达到增强真实对象功能的目的

	   *实现方式:
		1.静态代理:有一个类文件描述代理模式
		2.动态代理:在内存中形成代理类
		   *实现步骤
			1.代理对象和真实对象实现相同的接口

			//三个参数: 类加载器	接口数组	处理器
			2.代理对象 = Proxy.newProxyInstance(类加载器, 真实对象的接口数组, new InvocationHandler(){
				/*
					代理逻辑编写的方法
					   参数
						1.proxy:代理对象
						2.method:代理对象调用的方法,被封装为对象
						3.args:代理对象调用方法时,传递的实际参数
				*/
				@Override
				public Object invoke(){
				
					Object obj = method.invoke(真实对象, args);
					return obj;
				}
				});

			3.使用代理对象调用方法		代理对象.
			4.增强方法

		  *增强方式:
			1.增强参数列表
			2.增强返回值类型
			3.增强方法体执行逻辑	
	

==============================================================================================================

  ##JQuery:

      JQuery 基础
	1.概念:一个JavaScript框架

	2.快速入门:
		1.下载
		2.导入js文件
		3.使用
		
	3.JQuery对象和js对象区别与转换
		*jq --> js  : jq对象[索引]或者jq对象.get(索引)
		*js --> jq  : $(js对象)

	4.选择器:
	    1.基本操作学习:
		1.事件绑定:
			$("#b1").click(function{
				alert("xxx")
			})
		2.入口函数:
			$(function(){
			
			})
			***比window.onload好用,可以分别多次定义,不会覆盖
		3.样式控制:css方法
			$("#div1").css("background-color","red");

	    2.分类
		1.基本选择器:
			1.标签选择器(元素选择器)
				* 语法:  $("html标签名")
			2.id选择器
				* 语法:  $("#id的属性值")
			3.类选择器
				* 语法:  $(".class的属性值")

		2.层级选择器:
			1.后代选择器:
				* 语法:  $("A B")  选择A元素内部的所有B元素
			2.子选择器
				* 语法:  $("A > B")  选择A元素内部的所有B子元素
		3.属性选择器
			1.属性名称选择器
				* 语法:  $("A[属性名]")  包含指定属性的选择器
			2.属性选择器
				* 语法:  $("A[属性名='值']")  包含指定属性等于指定值的选择器
			3.复合属性选择器
				* 语法:  $("A[属性名='值'][]...")   包含多个属性条件的选择器
		4.过滤选择器
			1.首元素选择器
				* 语法:  :first  获得选择的元素中的第一个元素
			2.尾元素选择器
				* 语法:  :last    获得选择的元素中的最后一个元素
			3.非元素选择器:
				* 语法:  :not(selector)  不包含指定内容的元素
			4.偶数选择器:
				* 语法:  :even  偶数,从0开始计数
			5.奇数选择器:
				* 语法:  :odd   奇数  ,从0开始计数
			6.等于索引选择器:
				* 语法:  :eq(index)   指定索引元素
			7.大于索引选择器:
				* 语法:  :gt(index)    大于指定索引元素
			8.小于索引选择器
				* 语法:  :lt(index)     小于指定索引元素
		5.表单过滤选择器
			1.可用元素选择器
				* 语法:  :enabled  获得可用元素
			2.不可用元素选择器
				* 语法:  :disable  获得不可用元素
			3.选中选择器;
				* 语法:  :checked  获得单选/复选框选中的元素
			4.选中选择器:
				* 语法:  :selected  获得下拉框选中的元素
	5.DOM操作
		1.内容操作
			1.html()获取标签内的整体内容
			2.text()获取标签内的文本内容
			3.val()获取值
		2.属性操作
		    1.通用属性操作
			1.attr(): 获取/设置元素属性
			2.removeAttr(): 删除属性
			3.prop():  获取/设置元素的属性
			4.removeProp(): 删除属性

			**固有属性用prop,
			**自定义属性用attr


		    2.对class属性操作
			1.addClass():添加class属性值
			2.removeClass(): 删除class属性值
			3.toggleClass(): 切换class属性
				*toggleClass("one"):
					如果元素对象上存在Class="one",则将属性值one删除掉. 如果不存在,则添加one属性
			4.css()

		3.CRUD操作					//此处元素和对象意思相同
			1.append():	父元素把子元素追加到末尾
			2.prepend();	把子元素追加到开头
			3.appendTo():	把自己追加到别人的末尾
			4.prependTo():	把自己追加到别人的开头


			5.after():	在后边添加元素
			6.before():	在前边添加元素
			7.insertAfter():把自己添加在参数对象的后边
			8.insertBefore():把自己添加在参数对象的前边

			9.remove():	移除对象
			10.empty():	清空元素所有后代元素



      JQuery 高级
	1.动画
	   1.三种方式显示和隐藏元素
		1.默认显示和隐藏方式
			1.show([speed,[easing],[fn]])
			2.hide([speed,[easing],[fn]])
			3.toggle([speed,[easing],[fn]])

		2.滑动显示和隐藏方式
			1.slideDown([speed,[easing],[fn]])
			2.slideUp([speed,[easing],[fn]])
			3.slideToggle([speed,[easing],[fn]])

		3.淡入淡出显示和隐藏方式
			1.fadeIn([speed,[easing],[fn]])
			2.fadeOut([speed,[easing],[fn]])
			3.fadeToggle([speed,[easing],[fn]])

	2.遍历:
		1.普通for
		2.jq对象.each(callback)
		3.$.each(object,[callback])	
			获取对象  第一种方式:
				*  this	(为js对象)	//可以用${this}转换成jq对象
			获取对象  第二种方式:
				*  在回调函数中定义参数  index,element(索引和元素)
			回调函数的返回值
				*return false;	//等效为break
				*return true;	//等效为continue

		4.for(xxx of 容器对象) :	jQuery3.0版本之后提供的方式

	3.事件绑定
		1.jQuery标准的绑定方式
			jq对象.时间方法(回调函数);
		2.on绑定事件,off解除绑定
			jq对象.on("事件名称",回调函数)
			jq对象.off("事件名称")
		3.事件切换:toggle(fn1,fn2)

=================================================================================================
  ##AJAX:
	1.概念:ASynchronous javaScript And XML	//异步的javaScript和XML

	2.实现方式:
	    1.原生的js实现方式(了解)
		1.发送后不阻塞	
			创建核心对象: new XMLHttpRequest
			发送请求:   核心对象.open("请求方式","请求的URL",同步(true)或者异步(false));
		2.接受到服务器响应是触发事件
			绑定就绪选择改变事件
			核心对象.onreadystatechange = function{
					if(核心对象.readState == 4 && 核心对象.status == 200){	//就绪状态为4,响应状态码为200(响应成功)
					
					}				
				}
	    2.jQuery实现方式
		1.$.ajax()
		  *语法: $.ajax({	//键值对
			url:"xxx",	//请求路径
			type:"	",	//请求方式
			data:{json对象},//请求参数
			success:function (data){
	
			},//响应成功后的回调函数
			error:function(){},//请求响应出现错误,会执行的回调函数
			dataType:"text"	//设置接收到的响应数据的格式

		})
		2.$.get()
		3.$.post()

=============================================================================================

  ##JSON:
	概念: JavaScript object notation	java对象表示法	
		*json多于存储传输文本信息的语法.

	语法:
	   1.基本规则
		*数据由键值对构成
		*获取值的类型:
			1.数字: 浮点数
			2.字符串: 双引号中
			3.逻辑值: 布尔类型
			4.数组:	方括号中
			5.对象:	花括号中
		*数据由逗号分隔
		*花括号保存对象
		*方括号保存数组

	   2.获取对象
		1.json对象.键名
		2.json对象["键名"]
		3.数组对象[索引]

	json数据和java对象的相互转换	
		
		*json解析器:
			*常见的解析器:jsonlib,Gson,fastjson, jackson
			
		1.json转为java对象
			1.导入jar包
			2.创建核新对象
			3.调用方法
				1.readValue(json字符串数据,Class)
		2.java对象转为json
		    1.使用步骤
			1.导入jackson的相关jar包
			2.创建jackson核心对象
			3.调用相关方法
				*writeValue(参数,obj)
				    参数:
					File	转换为json文件
					Writer	转换为json字符串,并将json数据写入字符输出流中
					OutputStream	转换为json字符串,并将json数据写入字节输出流中

				*writeValueAsString(obj):将对象转换为json对象

			   *注解:
				1.@JsonIgnore:排除属性
				2.@JsonFormat:属性值格式化

			   *复杂对象的转换:
				1.Map	:和对象格式一致
				2.List 	:数组
===============================================================================================

   ##redis
	概念:一款高性能的NOSQL系列的非关系型数据库	//NOSQL:not only SQL

	命令操作

	   1.redis命令
		*redis-cli	:连接本地的 redis 服务
		*redis-cli -h host -p port -a password	:连接到远程带密码的 redis 服务

	   2.redis的数据结构
		*redis存储的是:可以,value格式的数据,其中可以都是字符串.value有5中不同的数据结构
		   *value的数据结构
			1)字符串类型 String
			2)哈希类型  hash  :map格式
			3)列表类型  list  :linkedlist格式
			4)集合类型  set   : 
			5)有序集合类型  sortedset
	
	   3.键(类比于对象,没有键就没有键对应的数据)
		*DEL key
		*EXISTS key
		*TYPE key		返回key储存的值类型

		*KEYS PATTERN		查找所有符合给定模式pattern的key
			key*		
		*EXPIRE key seconds  	给键设置过期时间(s)
		*PERSIST key		移除key的过期时间,key将持久保持
	   4.字符串类型 string
		*SET key value
		*GET key
	   5.哈希类型  hash
		*GSET key field value
		*HGET key field
		*HDEL key field

		*HKEYS key 获取所有哈希表中的字段
		*HVALS key 获取哈希表所有域(field)的值

		*HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment 
		*HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment 

	   6.列表类型 list	//我猜是双向链表
		*LLEN key 	获取列表长度
		*LPOP key 	移出并获取列表的第一个元素
		*RPOP key 	移除列表的最后一个元素，返回值为移除的元素

		*LPUSH key value1 [value2] 	将一个或多个值插入到列表头	//按顺序插入
		*RPUSH key value1 [value2] 	从列表尾添加一个或多个值
		*LPUSHX key value 		将一个值插入到已存在的列表头部，列表不存在时操作无效。

		*LRANGE key start stop 		获取列表指定范围内的元素
		*LINDEX key index 		通过索引获取列表中的元素
		*LSET key index value		通过索引设置列表中的元素

		*LREM key count value		移除列表中与参数 VALUE 相等的元素。cout:0(删除所有)  <0(从列表尾开始搜索)  >0(从列表头开始)

		*BRPOPLPUSH source destination timeout 
		从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止
	
	  7.集合类型 set:	//通过哈希表实现
		*SADD key member1 [member2]	向集合添加一个或多个成员
		*SREM key member1 [member2]	移除集合中一个或多个成员
		*SISMEMBER key member 	判断 member 元素是否是集合 key 的成员

		*SCARD key	获取集合的成员数
		*SMEMBERS key 	返回集合中的所有成员
		
		*SUNION key1 [key2]	返回所有给定集合的并集
		*SINTER key1 [key2] 	返回给定所有集合的交集
		*SDIFF key1 [key2] 	返回给定所有集合的差集	//类似于key1 - key1∪key2

		*SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合

	  8.有序集合sorted set	//通过哈希表实现,并且每个元素都会关联一个double类型的分数(score)
		*ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数
		*ZREM key member [member ...] 		移除有序集合中的一个或多个成员
		*ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合指定区间内的成员

		*ZCARD key 	获取有序集合的成员数
		*ZCOUNT key min max 计算在有序集合中指定区间分数的成员数


	持久化机制:
		1.RDB:默认方式
		     *在一定的时间间隔中,检测key的变化情况,然后持久化数据
			1.编辑redis.windows.conf文件
				save 900 1
				save 300 10
				save 60  100000
				 若在  S变化   次,则持久化一次
		     *若改变了redis.window.conf文件,则在启动数据库服务时需要制定配置文件

		2.AOF:日志记录方式,可以记录每一条命令的操作.可以每一次命令操作后,持续持久化数据
			1.编辑配置文件
				appendonly no/yes
			
				appendfsync always/everysec/no  每一次操作 / 每秒 / 不进行持久化


==========================================================================================================

   ##jedis:java中使用redis
	使用步骤:
	   1.导入jedis的jar包
	   2.使用
		1.获取连接
			Jedis jedis = new Jedis("url",端口号);
		2.操作
			*方法名同redis中的关键字相同
		3.关闭连接
			jedis.close();


  ##jedis连接池:  JedisPool
	使用:	0.创建一个配置对象:
			JedisPoolConfig config = new JedisPoolConfig();
			config.setMaxTotal();
			config.setMaxIdle();
		1.创建JedisPool连接池对象
			Jedispool jedispool = new Jedispool(config,host,post);
		2.调用方法,获取连接(jedis对象)
			Jedis jedis = Jedispool.getResource();
		3.操作
			jedis.方法();
		4.关闭连接
			jedis.close();
	*连接池工具类
========================================================================================================











========================================================================================================






