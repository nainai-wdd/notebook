=============================================
------------------java SE--------------------
==============================================
静态数据的初始化:
	1.被类加载器加载时(只会加载一次) 
		*按顺序执行静态代码(存在方法区)
//当第一次使用这个类时,会先自动把这个类加载进方法区

----------------------------------------------
方法使用可变参数时,传入的参数会自动把参数填充到数组中

-----------------------------------------------
访问权限修饰符
	*何处调用,何处判断
0.默认:
	包访问权限
1.public:
	访问不受限的
2.private:
	只允许在类内部访问
3.protected:
	包内可见的，并且对子类可见；

	*类的访问权限只能是 public 或者 默认
---------------------------------------------------
final关键字
	1.作用在成员变量上
		成员变量初始化时必须赋值,且这个值不允许改变
	2.作用在方法上( private 方法自动属于 final )
		继承时不能被覆盖
	3.作用在类上
		类不能被继承

--------------------------------------------------
子类的构造器:
	*有显式this()调用的构造器就会抑制掉该构造器里隐式的super()调用；
	*没有显式this()调用的构造器则会得到隐式的super()调用。
	ps:一连串this()的最后一个必然不再会在开头有this()调用，而这个开头没有this()调用的构造器就会得到编译器给隐式合成的super()调用
	

	创建子类时会按继承层次逐渐向上链接,以使每个基类的构造器都能得到调用
	*一个子类对象的实例会包含其所有基类所声明的字段，外加自己新声明的字段。

--------------------------------------------------
抽象类:单一继承
接口:多重继承
	*接口中的域隐式地是static和final的

--------------------------------------------------
内部类:
	1.内部类可以访问其所在类的所有属性
	2.使用其所在类的类名.this 来产生所在类的引用
	3.局部变量传递给匿名内部类是基于构造器传参的.不能在匿名内部类中修改外部局部变量

	**通过内部类提供闭包**
	**通过内部类实现多重继承**

--------------------------------------------------
容器类:
  *描述功能型的接口:
	0.Stack(本应该是接口,但它是实现类)
	其实现类不好用, 需要用时用Queue代替

	1.Queue 队列
	2.Set: 无映射符号表
	3.Map: 映射符号表

  *描述数据结构的接口:
	1.List: 序列表
	2.Map: 符号表

  ##常用实现类:		实现的功能接口
	1.ArrayList: 	Queue  DeQueue
	2.LinkedList	Queue  Dequeue
	3.PriorityQueue	Queue
	3.HashSet		Set
	4.HashMap		Map
	5.LinkedHashMap Map
	6.TreMap		Map
	
 #详解:
  ArrayList:自动扩容的数组
  	注意事项:
  		按索引遍历删除指定元素时,数组会发生变化。会导致漏删。
  		可以采用，倒序遍历。或者迭代器中使用remove方法
  	 
  LinkedList：双向链表
  	注意事项:
  		1.可以当做Queue和Stack使用(ps: Stack不是接口)
  		2.尽量不要通过索引遍历
  		
  PriorityQueue:优先队列
  	注意事项:
  		1.维护了一个数组实现的最小堆
  		
  HashSet,LinkedHashSet,TreSet:Set
  	注意事项:
  		与同名的Map类似
    	
  HashMap:
  	注意事项:
  		0.维护了一个拉链法处理冲突的散列表.(无序)
  		1.默认LOADING_FACTORY = 0.75f
  		2.数组大小 m 为 2^x。（原因：利用hash值计算索引时可以利用位运算，效率高）
  		3.计算hash值时,把key的hash值的前16位和后16位做位与,(原因:数组大小为 2 的整数次幂,利用哈希计算索引时,只		有低位有影响)
  		4.拉链法中的单链表在节点大于8时转换为红黑树,节点小于6时变回单链表
  		5.resize()方法巧妙利用 hash & m == 0 来判断扩容后节点所对应的节点是否改变
  		6.真的用了好多位运算。佩服
  
  LinkedHashMap:有序的HashMap
  	注意事项:
  		1.继承HashMap
  		2.利用给Node节点加上了before, after。从而实现有序遍历
  
  TreMap：红黑树Map
  	注意事项：
  		1.红黑树,元素必须可比较
  		2.时间复杂度,查找 < 插入 < 删除 约等于 lg(n)
  		3.利用节点旋转变化,和颜色翻转变化,不会影响等效树高.来维护树的等效平衡
  		4.最差情况,树高等于2lg(n)
--------------------------------------------------
字符串:

	String:		不带缓存区
	StringBuffer:	线程安全
	StringBuilder:	不是线程安全的
	
--------------------------------------------------
正则表达式（pattern类）
 *字符类
	.：	任意字符
	\d：	整数字符
	\w: 	单词字符
	\s:	空白符（空格，tab，换行，换页和回车）
		**大写视其为非**

	.：	任意字符
	[ab]:	ab间任意一个
	[^ab]:除了ab之外的任意字符
	[a-z]:a至z中的任意
	[R1&&R2]:R1和R2的交集
	
 *边界匹配器 
	^ 行的开头 
	$ 行的结尾 
	\b 单词边界 
	\B 非单词边界 
	\A 输入的开头 
	\G 上一个匹配的结尾 
	\Z 输入的结尾，仅用于最后的结束符（如果有的话） 
	\z 输入的结尾 

 *量词
	+：	1次或多次匹配前面的字符
	*:	零次或者多次匹配前面的字符
	?:	零次或者1次匹配前面的字符

	*默认贪婪型,尽可能长的匹配
	*量词后加 ? 为勉强型:
		匹配满足模式所最少的的字符串
	*量词后加 + 为占有型:
		匹配时不保存中间状态

Pattern对象:
	*Pattern.complie(String regex)由静态方法得到Pattern对象
	*Pattern.matcher(String regex,CharSequence input)是一个静态方法,用于快速匹配字符串,该方法适合用于只匹配一次,且匹配全部字符串.
	.split(CharSequence input):分割字符串
	.matcher(CharSequence input):得到Matcher对象

Matcher对象
	.matches():	对整个字符串进行匹配
	.lookingAt():	对前面的字符串进行匹配
	.find():		对字符串进行匹配
	
	当使用matches(),lookingAt(),find()执行匹配操作后,就可以利用以上三个方法得到更详细的信息. 
	start()返回匹配到的子字符串在字符串中的索引位置. 
	end()返回匹配到的子字符串的最后一个字符在字符串中的索引位置. 
	group()返回匹配到的子字符串

例子:
  while(m.find()) { 
     System.out.println(m.group()); 
  } 
--------------------------------------------------
IO流:
   *为流增加功能时,大量利用装饰模式
   *字节流转换为字符流,利用适配器模式
   
   *适配器:继承字节流,实现字符流.
   	InputStreamReader / OutputStreamWriter
   
   *核心接口:
   	字节流 InputStream / Out
   	字符流 Reader / Writer
   		  
   *核心实例
     	1.FileInputStream		/ Out
     	  FIleReader			/ Writer
   	2.ByteArrayInputStream	/ Out
   	  CharArrayReader		/ Writer
   	3.PipeInputStream		/ Out
   	  PipeReader			/ Writer
   	  
   	4.StringBufferInputStream(已弃用) 
   	  StringReader			/ Writer
   	5.SequenceInputStream
   		
   *装饰接口FilterInputStream	/ Out
   		FilterWriter		/ Writer
   		
   *装饰实例
   	1.DataInputStream		/ Out	 / PrintStream
   	  需要读行时使用BufferedReader	 / PrintWriter
   	2.BufferedInputStream		/ Out	 	
   	  BufferedReader	(readLine)	/ Writer		
   	3.LineNumberInputStream(已弃用)
   	  LineNumberReader
   	4.PushbackInputStream		我们可能永远不会用到
   	  PushbackReader
   	  
 非IO流的类
   RandomAccessFile 可读可写,还可随机读取
   
	--------------------------------------------------
 FileChannel:
   *获取通道:
   	字节流对象.getChannel()
   	
   *通道方法:
   	1.write(ByteBuffer src): 把给定的缓冲区的内容写入通道
   	2.read(ByteBuffer dst) : 将字节序列从此通道读入给定的缓冲区。
   	
   *ByteBuffer:  唯一和通道交互的缓冲器
   	静态方法:
   		1.wrap():接受字节数组,返回ByteBuffer
   		2.allocation(int capacity):新生成一个ByteBuffer,其界限将为其容量
   		
   	从Buffer类继承的方法: 
   		1.filp():反转此缓冲区。
   			首先将限制设置为当前位置，然后将位置设置为 0。如果已定义了标记，则丢弃该标记。
   		2.clear():清除此缓冲区。
   			将位置设置为 0，将限制设置为容量，并丢弃标记。
   		3.rewind():重绕此缓冲区。(在已经设置好限制时使用)
   			将位置设置为 0 并丢弃标记
   		4.position(int newPosition) 设置此缓冲区的位置。
   			如果标记已定义且大于新的位置，则丢弃该标记。
   	
   	视图:
		1.asCharBuffer() :
          		创建此字节缓冲区的视图，作为 char 缓冲区。
          	   ps:
          		1.新缓冲区的内容将从此缓冲区的当前位置开始,到限制为止
          		2.两个缓冲区内容互相可见
          		3.但是这两个缓冲区的位置、界限和标记值是相互独立的
          		
          	##可以利用视图来传入基本数据类型
          		asDouble,asInt...
          		
          		
          	  **Charset.forName("编码格式").decode(buff对象)**
          	  	创建不关联的视图,且创建时移动了原buffer的当前位置
      --------------------------------------------------    	  	
  Zip压缩类
  	ZipInputStream
    方法:
  	1.putNextEntry(new ZipEntry("文件名"))
  		开始写入新的 ZIP 文件条目并将流定位到条目数据的开始处。
  校验类
  	CheckedInputStream(字节流,校验方法)
  校验方法 Checksum
  	1.new Adler32() 快
  	2.new CRC32()	慢

  	--------------------------------------------------
  *Serialable
    序列化操作:
  	1.在类上加implements Serialable
  	2.ObjectInputStream 绑定FileInputStream
  	3.ois.writeObject(实例对象)
  	4.关闭流
  	
    反序列化:
    	1.ObjectOutputStream 绑定FileOutputStream
    	2.oos.readObject() 返回Object对象,记得向上转型
    	
    可以在类上添加手动序列化方法,(代替自动序列化,且不会调用构造函数)
    	1.private void writeObject(ObjectOutputStream stream) throws IOException{}
    	2.private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException{}
    	
    transient关键字
     在属性前加transient,此属性就不会被自动序列化
     
    static修饰的属性不会被序列化
    	
  *Externalizable:
    	1.手动序列化, 实现read/write方法, 
    	2.会调用构造函数 	
    	--------------------------------------------------
  关于clone:
  	1.Object中的clone是浅clone,只会复制属性的索引
  	2.用序列化和反序列化得到的副本是深clone,复制整个对象网
  	--------------------------------------------------
  XML:
  	dom4j完全支持DOM，SAX和JAXP
  	--------------------------------------------------
  Preferences:
  	Preferences prefs = Preference.userNodeForPackage(class c)
  	创建以c的类名命名的单一节点.
=============================================================

并发:
  0.Runable接口:描述任务
  	无返回值的run()方法
  0.Callable接口:描述任务
  	带返回值的call()方法
      1.执行器中用submit方法调用,返回值用Future接收
      2.Future 对象上使用get()方法获取返回值
  	
  1.Thread类:任务对象
  	1.构造器传入Runnable对象,创建任务对象
    	2.重写run()方法,创建任务对象
    	3.使用.start()开启进程
    	
  2.Executor:执行器,用来管理Thead对象
    *ExecutorService
    进程池:可由Executors类的静态方法创建
    	1.CachedThread
    	2.FixedThread
    	3.SingleThread
    方法:
    	1.exectute(Runnable command),启动任务
    	2.submit(Runnable/Callable task) 
		提交一个任务用于执行，并返回一个表示该任务的 Future。
    	3.shutdown	:启动一次顺序关闭，执行以前提交的任务，但不接受新任务。
    	4.shutdownNow :
    		试图停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。
     5.awaitTermination(long timeout,TimeUnit unit)方法：
     		当等待超过设定时间时，会监测ExecutorService是否已经关闭，若关闭则返回true，否则返回false。
     		一般情况下会和shutdown方法组合使用。
     		
   3.Future<V>接口:
    作用:	接受控制器submit的返回值,用以控制控制器中单个Thread.
   	1.get()	:获取异步计算结果
   	2.cancel() :取消对此任务的执行
   	  若任务未开始,则任务永远不运行
   		参数:boolean mayInterruptIfRunning
   		true:允许结束运行中的任务
    	
  后台线程:
  	所有非后台进程结束后,所有后台进程会被马上杀死。
  	*setDaemon(true):设置为后台进程
  	*isDaemon():判断是否为后台进程
  	
  Thread重要方法:
  	1.start()
  	2.t.join():
  		当前线程等待 t 线程结束
  	3.t.interrupt():
  		1.if线程未受阻,设置线程状态为中断状态
  		2.if线程处于主动受阻状态(sleep or wait),则 它 将收到 InterruptException
  		3.if线程处于 可中断 I/O中受阻,则通道关闭, 它 将收到 ClosedByInterruptException
  		4.if该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。???
  		4.if中断失败,线程的 checkAccess方法就会被调用,可能  抛出  SecurityException。
  		
  捕获线程中的异常:
  	1.无法捕获从线程逃逸的异常,但可以给每个Thread对象附着一个异常处理器
  	2.编写线程的异常处理器,实现 Thread.UncaughtExceptionHandler  接口
  	3.给Thread对象设置异常处理器
  		t.setUncaughtExceptionHandler
  	4.可以给Thread类设置DefaultUncaughtExceptionHandler,统一异常处理器
  --------------------------------------------------
  
 *共享受限资源:
 	*volatile关键字:
 		1）保证可视性
　　	2）禁止进行指令重排序。
	*Atomic数据类型:
		1.保证自增自减等操作的原子性
 	*synchronized关键字:
 		1.需要将域设置为私有,即private synchronized.
 		2.synchronized static可以锁静态代码块(类上的锁)
 	
 	*ReentrantLock对象:
	  内部类
		Sync：
			锁同步控制的基础类，子类分为公平与非公平锁。
		使用AQS（就是Sync的父类AbstractQueuedSynchronizer)
		状态来表示锁的持有数量。此外Sync内部还提供了释放锁、
		获取当前持有锁的Thread对象等方法。
		
		FairSync：
			FairSync重写了AQS的tryAcquire()方法，因此在请求获取锁的实现上作了调整，
		在请求获取锁时首先判断AQS状态（锁的持有数量）是否为0。
		若为0：判断请求队列中该线程之前是否没有在排队的线程且是可以获取锁的状态，满足条件则将当前线程设为锁的持有者。
		否则返回false。若不为0：则判断锁的持有者是否为当前线程。如果不是，返回false。
			
		NonfairSync：
			首先根据CAS返回结果判断是否可以获取锁，如果可以，
		则直接将当前线程设为锁的持有者，否则中断自己身执行状态，加入请求队列获取锁直到获取成功。
		
	  创建方法：
		new ReentrantLock(): 带参true 公平锁，false 非公平锁 ，默认非公平
 	  方法:
 	  	lock()	:获取锁,若无法获取,则线程阻塞,直到获取到锁
 	  	unLock()	:释放锁
 	  	
 	  	tryLock()	:尝试获取锁,无法获取则返回false,获取则true
 	  	tryLock(long time):
 	  		1.在指定时间内尝试获取锁,超时返回false,获取返回true
 	  		2.等待期间为可中断阻塞,可以获得InterruptException
			
		lockInterruptibly()（中断方式获取锁）
 	  		
 	  	newCondition(): 获取lock想关联的Condition实例
 	  标准使用:
 	  	Lock lock = new ReentrantLock();
 	  	lock.lock;
 	  	try{...}
 	  	finally{lock.unlock;}
 	  	
 	  构造是可传入参数true,则为公平锁。否则默认是非公平锁。
 	  
 	*Condition类:
		1.监视锁的对象
		2.方法实际上通过拥有当前对象的线程执行
		
 	   通过lock.newCondition()获得相关联的实例
 	   	1.Condition 替代了 Object 监视器方法的使用（wait、notify 和 notifyAll）
 	   在锁中
 	  	Condition对象.await() == this.wait()
 	  			  .signal()== this.notify()
 	  	
 	*happens-before原则（先行发生原则）：
		1.程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作
		2.锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作
		3.volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作
		4.传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C
		
		5.线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作
		6.线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生
		7.线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结		束、Thread.isAlive()的返回值手段检测到线程已经终止执行
		8.对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始
		
	线程本地储存:
	   ThreadLocal类
		1.ThreadLocal对象通常当做静态域储存
		2.每个线程都会有不同的副本.
		3.new ThreadLocal<E>()
		
	--------------------------------------------------
  终结任务:
  	
  *线程状态:
  	1.new		: 新建
  	2.Runnable	: 可运行
  	3.Blocked	: 阻塞
  	4.Dead	: 死亡
  	
    Blocked:
     进入的情况
    	1.调用sleep()
    	2.调用wait()
    	3.任务等待某个输入/输出完成
    	4.任务进入在某个对象上调用其同步控制方法,但是对象锁不可用,因为一个任务已经获取这个锁了
    	
 #中断:
  interrupt方法
    0.给线程设置一个中断标记
  	
    1.有中断标记时:
	1.如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法，或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，则其中断状态将被清除，它还将收到一个 InterruptedException。 
	2.如果该线程在可中断的通道上的 I/O 操作中受阻，则该通道将被关闭，该线程的中断状态将被设置并且该线程将收到一个 ClosedByInterruptException。 
	3.如果该线程在一个 Selector 中受阻，则该线程的中断状态将被设置，它将立即从选择操作返回，并可能带有一个非零值，就好像调用了选择器的 wakeup 方法一样。
	
    2.设置中断标记失败（这在任何情况下都是允许的），则该线程的 checkAccess 方法就会被调用，这可能抛出 SecurityException。 (调用线程没有修改线程的权限)。
	
	
  终结任务的常用手段:
  	1.在线程中判断中断标记,跳出循环
  		while(!Thread.interrupted){}
  	2.利用可中断阻塞时会自动判断中断标记来获得异常
  		try{}catch(InterruptException e){}
		
	--------------------------------------------------
	
   线程协调:
   	*synchronize的锁对象:(Object)
   	1.wait()	:该线程发布对此监视器的所有权,并等待
   	2.notify()	:唤醒在此对象监视器上等待的单个线程。(瞬时信号)
   			*直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。
   			
	*Condition类:
 	   通过lock.newCondition()获得相关联的实例
 	   	1.Condition 替代了 Object 监视器方法的使用（wait、notify 和 notifyAll）
 	   在锁中
 	  	Condition对象.await() == this.wait()
 	  			  .signal()== this.notify()
	
	线程协调的常用几种思路:
  		1.使用锁技术,等待触发条件发生:
   		   while(触发条件)
   			wait();
   			
   		2.把要共享的资源放入BlockingQueue接口中(生产者-消费者模型)
   	   	   常用BlockingQueue实例：
   	   	   	1.ArrayBlockingQueue<>	：固定容量
   	   	   	2.SynchronousQueue<>		：容量为1   	   	
   	   	   	3.PriorityBlockingQueue<>	：优先队列
   	   	   	4.LinkedBlockingDeque<>, LinkedBlockingQueue<>
   	   	   	5.DelayQueue			：只放Delay的优先队列
   		3.使用PipedReader/Write  在线程间传递信息
   	   
   	*死锁条件(同时满足):
   		1.互斥条件:任务中使用的资源中至少有一个无能共享
   		2.至少有一个任务必须持有资源并且正在等待其他任务所持有的资源
   		3.资源不能被抢占
   		4.必须有循环等待

   util.concurrent包:
   	1.CountDownLatch:计时锁存器
   		new CountDownLatch(int count)创建以count开始的CountDownLatch
   	    
   		.await():若计数不为零,则当前线程阻塞直到计数为零
   		.countDown():计数-1 (最低减到 0 )
   		
   	2.CyclicBarrier:群屏障
   		  new CyclicBarrier(int parties, Runnable barrierAction):
          		parties - 在启动 barrier 前必须调用 await() 的线程数
			barrierAction - 在启动 barrier 时执行的命令；(由最后个线程执行)
						如果不执行任何操作，则该参数为 null
	    
			.await():等待CyclicBarrier对象启动,且barrierAction执行完毕
			
	3.DelayQueue:储存实现Delayed 接口的优先队列
		*存延时任务的话,存入目标也要实现Runnable接口
		
		Delayed接口:
		   需要实现:
			1.getDelay();
				剩余时间
			2.compareTo();
				比较
				
	4.PriorityBlockingQueue:带阻塞功能的优先队列
	  ps：java7中加入TransferQueue取代
		new PriorityBlockingQueue(int initialCapacity, Comparator<? super E> comparator) 
          	使用指定的初始容量创建一个 PriorityBlockingQueue，并根据指定的比较器对其元素进行排序
	
		
   	5.ScheduledExecutor:有计划功能的线程控制器
   	   ScheduledExecutorService接口:
   	   	实例:
   	   		1.Executors.newScheduledThreadPool
   	   		2.ScheduledThreadPoolExecutor(int corePoolSize,
                                   ThreadFactory threadFactory,
                                   RejectedExecutionHandler handler)
                               分别存在(1),(1.2)参数的构造器
   	   	方法:
   	   		1.schedule(Callable<V> callable, long delay, TimeUnit unit) 
          			创建并执行在给定延迟后启用的 ScheduledFuture, Runnable同理
			2.scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
 				创建并执行一个周期性 开始 的任务
 			3.scheduleWithFixedDelay(同上)
 				创建并执行一个周期性 延迟 的任务
 				
 	6.Semaphore:信号锁（分发许可）
 	   实例：
 	   	new Semaphore（int permits）
 	   方法：
 	   	1.acquire(int permits) 
          		从此信号量获取permits个许可
          	2.release(int permits) 
          		释放permits个许可，将其返回给信号量
          	  ps：
          	  	1.对于1.2，无参形式相当于permits == 1；
          	  	2.	     阻塞可中断
          	  	3.存在Uninterruptibly形式
          	  	
          	3.drainPermits() 
          		获取并返回立即可用的所有许可。
          		
      7.Exchanger：交换栅栏
         .exchange(V x, long timeout, TimeUnit unit) 
		等待另一个线程到达此交换点，然后将给定的对象传送给该线程，同时接收该线程的对象。
		（除非当前线程被中断，或者超出了指定的等待时间）
		
	并发下性能调优:
		ReadWriteLock接口:
			读写锁,可被多进程读取,但是只能被一个进程写入,且写入时无法读取
		实现:
			new ReentrantReadWriteLock(boolean fair) :参数为null时默认(非公平)
          		   使用给定的公平策略创建一个新的 ReentrantReadWriteLock。
		方法:
			1.readLock() :返回用于读取操作的锁。
      		2.writeLock():返回用于写入操作的锁
      		
      活动对象:
        *特点:
      	1.每个对象都有自己的工作线程
      	2.每个对象都将维护对他自己的域的的全部控制权
      	3.所有在活动对象之间的通信都将以在这些对象之间的消息形式发生
      	4.活动对象之间的所有消息都要排队
      	
        *实现方式:
        	1.对象内包含一个Executors.newSingleThreadExecutor
        	2.任务以内部类的形式存在
        	3.方法返回Future对象 
        	   Future 方法(){
        		return exec.submit(new Runnable{
        			public void run(){}
        		});
        	    }
        	4.用阻塞容器接收Future对象
=============================================================
代理:
   1.静态代理:
	创建一个直接引用原对象的代理对象
   2.动态代理:
	在运行时创建代理对象

	1.JDK动态代理:
	  特点:
		1.动态创建 包含原对象引用的代理对象
		2.原对象必须实现接口
		3.JDK直接支持
	  步骤:
		1.获取信息
			1.类加载器
			2.代理对象所实现的接口
		2.编写处理器 InvocationHandler
			*需要原对象的实例
		3.利用Proxy.newProxyInstance创建代理对象实例
	  例子:
Sale proxy = (Sale)Proxy.newProxyInstance(Computer.class.getClassLoader(), 				Computer.class.getInterfaces(), new InvocationHandler() {
           Object computer = new Computer();
           @Override
           public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			return method.invoke(computer, args);
		}});

	2.CGLIB动态代理:
	   特点:
		0.(需要导入jar包)
		1.动态创建 继承了原对象的代理对象
		2.无需实现接口
		3.高性能
	   步骤:
		1.创建用于拦截回调的类(继承MethodInterceptor)
		2.创建Enhancer设置拦截对象,设置回调的类(传入1.对象),设置回调策略(编写类,继承CallbackFilter,传入对象)
		3.利用Enhancer.create()创建代理对象
		
	  **可以使用工厂模式来代理接口

--------------------------------------------------
空对象模式,可以利用代理实现

==================================================================================
*本地字符流默认JBK编码



函数式接口(只有一个抽象方法)	        					抽象方法
	Function<T, R>	T：入参类型，	R：出参类型		R apply(T t)
	Suppiler<R>     没有入参       	R：出参类型；		R get();
	Consumer <T>	T：入参类型；	没有出参      		void accept(T t)
	Predicate <T>   T：入参类型；	出参类型是Boolean	boolean text（T t）

Stream流获取常用方法：
	Collection  集合通过stream方法获取流
	Stream接口的静态方法of可以获取数组对应的流



Stream流常用方法：  Stream流属于管道流，只能被消费一次，一个流只能用一次
	void forEach（Consumer <? super T>  ）;  遍历	是终结方法.使用后流不能再次使用。
	stream<T> filter(Predicate <? super T>  );  筛选
	<R>Stream <R> map(Function<?  super T,? super  R>   );  映射
	Stream<T> limit(long max)；  截取前几
	Stream<T> skip(long n);  跳过前几
	long count();  计数

方法的引用：			等效lambda表达式
	对象名：成员方法		(参数)->对象名.成员方法(参数)
	   类名：静态成员方法		(参数)->类名.静态成员方法(参数)
  	 super：父类成员方法		(参数)->super.父类成员方法(参数)
	    this：本类成员方法		(参数)->this.本类成员方法(参数)
	构造器
	   类名：new		(参数)->new 类名(参数)
	 类名[]：new		(参数)->new 类名[参数](参数)

反射：
	
	获取 类对象的方法：
	1.Class.forName("全类名")	：将字节码文件加载进内存，返回Class对象
		*多用于配置文件，将类名定义在配置文件中。读取文件加载类
	2.类名.class		：通过类名的属性class获取
		*多用于参数的传递
	3.对象.getClass		：getClass（）方法在object类中定义者
		*多用于对象的获取字节码的方式

	同一个字节码文件(*.class)在一次程序运行过程中,只会被加载一次.不论通过哪一种方式获取的Class对象都是同一个
	
	class对象功能：
		1.获取成员变量们：
		   *Field[] getFilter()			：  获取所有public修饰的成员变量
		   *Field getFilter(String name)		：  获取指定名称的public修饰的成员变量
		
		   *Field[] getDeclaredFilter()		：获取所有的成员变量
		   *Field getDeclaredFilter(String name)	：获取指定名称的成员变量
		
		2.获取构造方法们		Class<?>... parameterTypes//例子：方法参数为int,那么此处参数为int.class
		   *Constructor<?>[] getConstructors()
		   *Constructor<T> getConstructors(Class<?>... parameterTypes)   
		   
		   *Constructor<?>[] getDeclaredConstructors()
		   *Constructor<T> getDeclaredConstructors(Class<?>... parameterTypes)
		3.获取成员方法们
		   *Method[] getMethod()
		   *Method getMethod(String name,Class<?>... parameterTypes)

		   *Method[] getDeclaredMethod()
		   *Method getDeclaredMethod(String name,Class<?>... parameterTypes)
		4.获取类名
		   *String getName()
		5.获取类加载器
		   *ClassLoader getClassLoader()
		6.获取注解
		   *<A extends Annotation>A getAnnotation(Class<A> annotationClass)//返回该注解(接口)的子类实现对象,抽象方法用(return 属性值)重写

	*Field：成员变量
	       *操作：
		1.设置值
		   *void set(Object obj,Object value)
		2.获取值
		   *get(Object obj)

		3.忽略访问权限修饰符的安全检查
		   *setAccessible(true)：暴力反射	
	
	*Constructor：构造方法
	       *创建对象：
		*T newInstance(object... initargs)
		*setAccessible(true)：暴力反射//忽略访问权限修饰符的安全检查

	*Method：成员方法
	       *执行方法：
		*Object invoke(Object obj,Object...args)
		*setAccessible(true)：暴力反射//忽略此访问权限修饰符的安全检查

	*ClassLoader类加载器
	       *获取class目录下的配置文件字节流：
		*Inputstream getResourceAsStream(String name)

注解：
	*作用分类：
	       1.编写文档：[生成doc文档]
	       2.代码分析：[使用反射]
	       3.编译检查：[例如Override]

	*JDK中预定的一些注解：
	       *@Override	：检测被该注解标注的方法是否是继承自父类中(接口)的
	       *@Deprecated	：将该注解标注的内容,已过时
	       *@SuppressWarnings：压制警告

	*自定义注解
	       *格式：
		元注解(描述注解的注解)
		public @intterface 注解名称{
			属性列表;(实际上是抽象方法)
}
	       *本质：注解本质上就是一个接口,该接口默认继承Annotation接口
		*public interface 注解名称 extends java.lang.annotation.Annotation{}

	       *属性：接口中的抽象方法
		*要求：
		     1.属性的返回值有下列取值
			*基本数据类型
			*String
			*枚举
			*注解
			*以上类型的数组

		     2.定义了属性的注解,在使用时要给属性赋值
			1.如果定义属性时,使用default关键字给属性默认初始化值,则使用注解时,可以不进行属性的赋值.
			2.如果只有一个属性需要赋值,并且属性的名称是value.则value可以省略,直接定义值即可
			3.数组赋值时,使用{}包裹。如果数组只有一个元素，则{}可以省略。
	       *元注解：用于描述注解的注解
		*@Target：描述注解能够作用的位置
		     *ElementType取值：
			*TYPE：可以作用于类上
			*METHOD：可以作用于方法上
			*FIELD：可以作用于成员变量上
		*@Retention:描述注解被保留的阶段
		     *@Retention(RetentionPolicy.SOURCE):当前被描述的注解,不会保留到class字节码文件中
		     *@Retention(RetentionPolicy.CLASS):当前被描述的注解,会保留到class字节码文件中.不会被JVM读取到
		     *@Retention(RetentionPolicy.RUNTIME):当前被描述的注解,会保留到class字节码文件中.并被JVM读取到
		*@Documented：描述注解是否被抽取到api文档中
		*@Inherit：描述注解是否被子类继承

	*在程序中(解析)注解：获取注解中定义的属性值
	       1.获取注解定义的位置的对象（Class，Method，Field）
	       2.获取指定的注解
		*getAnnotation（class）//
		//其实就是在内存中生成了一个该注解接口的子类实现对象，抽象方法用（return 属性值）重写
	       3.调用注解中的抽象方法获取配置的属性值
         小结：
	1.大多时候我们用注解，很少自定义注解
	2.注解给谁用？
	         1.编译器
	         2.给解析程序用
	3.注解不是程序的一部分，可以理解为注解就是一个标签
