================================================
-----------------    JVM      -----------------
================================================

1.内存模型:
	1.程序计数器:Program Counter Register
		当前线程锁执行的字节码的指示器
	
	2.java虚拟机栈: VM Stack
		1.描述java方法的内存模型
		2.每执行一个方法,就同步创建一个栈帧(局部变量,操作数栈,动态链接,方法出口)
		3.栈容量由 -Xss参数来设定
		*请求的栈深度大于虚拟机所允许的深度	:StackOverflowError
		*栈扩展是无法申请到足够的内存		:OutOfMemoryError
		
	3.本地方法栈: Native Method Stack
		1.描述本地方法的内存模型
		2. 同上
	
	4.java堆: java Heap
		1.此内存的唯一目的就是存放对象实例
		2.TLAB:线程私有的分配缓存区
		3.大小由参数 -Xmx 和 -Xms 设定
		*没有完成实例分配,并且堆也无法再扩展时:OutOfMemoryError
		
	5.方法区: Method Area
		1.和堆一样是各个线程共享的内存区域
		2.用于存储已被虚拟机加载的 类型信息, 常量, 静态变量, 即使编译器编译后的代码缓存 等数据
		*方法区无法满足新的内存分配需求时: OutOfMemoryError
		
	6.运行时常量池: Runtime Constant Pool
		是方法区的一部分,用于存放编译期生成的各种字面常量与符号引用
		*常量池无法再申请到内存: OutOfMemoryError
		
	7.直接内存:
		*物理内存不足时:OutOfMemoryError
		
  1.1对象创建
  	1.new 对象名:
  		先进行类加载检查
  	2.分配内存:
  		两种方法,指针碰撞 和 空闲列表
  	3.设置对象头
  	
  	4.调用构造函数
  	
  1.2对象的内存布局:(HotSpot)
  	1.对象头:
  		1.Mark Word:根据虚拟机位数,大小分别为32bit和64bit
  		2.类型指针	:通过类型指针确定对象是哪个类的实例(但并不是所有的虚拟机实现都必须在对象数据上保留类型指针)
  	2.实例数据:
  		1.字段	:(包括父类继承下来的字段,默认存储在子类字段的前面)
  			存储顺序受到虚拟机分配参数(-XX:FieldsAllocationStyle参数)和
  			java源码定义的顺序影响(默认 longs/double,ints,shorts/chars,bytes/booleans,oops)
  				
  	3.对齐填充:
  		对齐填充对象的内存,使其为8bit的整数倍
  		
  1.3对象的访问定位:
  	1.句柄访问:
  	2.直接指针:
======================================================
2.垃圾收集器Garbage Collection（GC）
	回收条件：
	  1.引用计数算法（效率高，但不是java中的主流）
		在对象中添加一个引用计数器，产生引用 +1，引用失效 -1，计数器归零时可回收状态	
		ps：两个对象互相引用时，永远不会被回收
	  2.可达性分析算法
	  	从一系列GC Roots到对象不可达，即为可回收
	  	  ps:枚举根节点时会停止所用用户进程
	  	固定可作为GC Roots的对象：
	  		1.虚拟机栈中引用的对象
	  		2.方法区中静态属性引用的对象
	  		3.方法区中常量引用的对象
	  		4.本地方法栈中JNI（Native方法）引用对象
	  		5.java虚拟机内部的引用
	  		6.所有被同步锁持（synchronized关键字）有的对象
	  		7.反映java虚拟机内部情况的JMXBean，JVMTI中注册的回调，本地代码缓存等
	  		8.特点垃圾收集器实现的其他对象
-------------------------------------------------------------
	引用： 	
	  1.强引用：
	  	常规引用
	  2.软引用：
	  	1.在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收
	  	2.创建某引用的软引用
	  		new SoftReference（T reference）	
	  3.软引用：
	  	1.只被弱引用关联的对象只能生存到下一次垃圾收集发生为止
-------------------------------------------------------------
	回收过程：
	   1.第一次标记可回收，若有必要执行finalize方法，则把对象放置在F-Queue中，
	   由一条虚拟机自动建立的，低调度优先的Finalizer线程去执行finalize方法（不承认一定有机会运行）
	   
	   2.一个对象被连续两次标记，则被回收。
	   ps：finalize方法只会执行一次，有机会使被标记对象逃脱回收。
	   ps：finalize是不被推荐使用的，try{}finally{}比他好用
-------------------------------------------------------------
	回收方法区：
	   1.无用类条件(同时满足)
	  	1.该类所有实例都已经被回收了
	  	2.加载该类的类加载器已经被回收了
	  	3.该类对应的java.class对象没有在任何地方呗引用,无法再任何地方通过反射访问该类
	  	
 	   2. 回收常量和堆内存的回收类似
-------------------------------------------------------------
	垃圾收集算法:
	   1.分代收集理论:
	   	把对象分代存储(堆分区)
	   		1.新生代,2.老年代(至少分两个区)
	   	
	   	算法:
	   		1.标记-清除算法:基础算法,速度较快,但会导致内存碎片化
	   		2.标记-复制算法:存活率较低时优先的算法(一般用于新生代)
	   			"半区复制",内存只使用一半,回收时把存活的对象复制到另一半,然后清除原先的内存
	   			"Appel式回收",新生代分为一块较大的Eden空间和两块较小的Survivor空间,需要一个依赖其他内存区域的"逃生门"安全设计
	   		3.标记-整理算法:针对对象存活率高的内存区域(老年代)
	   			让所有存活对象都向内存空间一段移动
	   			好处:内存连续,坏处:速度慢
-------------------------------------------------------------------------
	HotSpot的算法细节实现：
	   1.根节点枚举：
	   	使用一组OopMap数据结构存GC Roots
	   	*类加载动作完成的时候，把对象内什么偏移量上是什么类型的数据计算出来
	   	*在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用
	   	
	   2.安全点：
	   	以“是否让程序长时间执行的特征”为标准进行选定
	   	1.抢先式中断（先停，后判断是否是安全点），
	   	2.主动式中断（先判断是否是安全点，再决定是否停）
	   	
	   *安全区：
	   	在这段代码片段之中，引用关系不会发生变化
	   	ps：安全区代码可以和回收线程并行运行
	   	
	   3.记忆集与卡表：
	   	用记忆集记录跨代引用的GC Roots（非收集区指向收集区的指针集合的抽象数据结构）
	   	*常用实现为 卡表：
	   		此卡页内有跨代引用，则对应卡表的数组元素的值为 1（称此元素变脏），否则为 0
	   		
	   4.写屏障
	   	对引用类型字段赋值的AOP切面（为了维护记忆集）
	   	
	   	*伪共享问题：中央处理器的缓存机制，卡表的维护在高并发下的写操作有概率共享同一个缓存行，导致性能降低（写回，无效化，或者同步）	
	   		解决方式：采取有条件的的写屏障，即只有当卡表元素未被标记过时才将其标记为变脏
	   	
	   5.并发的可达性分析：
	   	标记阶段的并行操作可行性（枚举GC roots之后）
	   	*利用节点遍历时的三种状态讨论并发下的问题（未访问，已访问，完全访问）
	   	
	   	同时满足以下两点，会导致对象消失：
	   		1.赋值器插入了一条或多条从黑色对象到白色对象的新引用
	   		2.赋值器删除了全部从灰色对象到该白色对象的直接或者间接引用
	   	解决方法：
	   		1.增量更新：当情况 1 发生时，记录那个黑色对象，等待并发扫描结束，以它们为根重新扫描一次
	   		2.原始快照：灰色对象删除白色对象的引用时，记录灰色对象，并发扫描结束后，以它们为根重新扫描一次
	-------------------------------------------------------------
	   6.经典的垃圾收集器：
	   	1.Serial收集器：
	   		1.单线程
	   		2.新生代 复制算法，老年代 整理算法
	   		3.最高的单线程收集效率，额外内存消耗最小
	   		
	   		测试结果:
	   			1.新生区回收时,同期的存活对象内存总和大于survivor的一半,则这一期对象直接晋升到老年区
	   			2.空间分配担保策略:
	   				回收时,若老年区最大可用的连续空间小于新生代所有对象的总空间,则视为冒险行为1,
	   									  若小于历次晋升的平均空间,则视为冒险行为2
	   				若冒险行为1,2同时存在(1&&2),则进行Full GC, 否则进行Minor GC (JDK6 updata24之后)
	   	2.ParNew收集器：
	   		1.Serial的多线程版本
	   		2.能够与CMS收集器配合工作（激活CMS后的默认新生代收集器，且JDK9后只能和CMS搭配）
	   		
	   	3.Parallel Scavenge收集器：
	   		1.是一款新生代收集器，基于标记——复制算法
	   		2.可控的吞吐量（Throughput）
	   		  吞吐量 = 运行 用户代码时间 / （用户时间 + 垃圾收集时间）
	   			1.垃圾收集器最大停顿时间：-XX：MaxGCPauseMillis
	   				牺牲新生代大小和吞吐量实现更小的最大停顿时间
	   			2.直接设置吞吐量大小	：-XX：GCTimeRatio
	   			3.自适应调节策略开关	：-XX：PretenureSizeThreshold
	   				自动调节新生代大小(-Xmn), Eden与Survivor区的比例(-XX:SurvivorRatio),
	   					大对象晋升老年代对象大小(-XX:PretenureSizeThreshold)等细节参数.
	   				Ps:虚拟机动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量
	   		
	   	4.Serial Old收集器：
	   		Serial的老年代版本，标记整理算法
	   		用途：CMS收集器发生失败时的后备预案
	   			
	   	5.Parallel Old收集器：
	   		Parallel Scavenge的老年代版本，标记整理算法
	   		
	   	-------------------------------------------------------------	
	   	6.CMS收集器：
	   		1.获取最短回收停顿时间为目标的收集器
	   			B/S系统的服务端上，关注服务的响应速度，希望系统停顿时间尽可能短，给用户带来良好的体验
	   			
	   		2.基于标记-清除算法(增量更新)
	   		工作过程:
	   			1.初始标记:(stop world)
	   			2.并发标记:与用户线程并发
	   			3.重新标记(stop world)
	   				增量更新
	   			4.并发清除:与用户线程并发
	   		ps:
	   			1.无法清除浮动垃圾
	   			2.并发失败时,临时启动Serial Old收集器
	   			3.产生大量空间碎片(多次清理之后应当进行碎片整理)
	   			
	   	-------------------------------------------------------------		
	   	7.Garbage First(G1)收集器:
	   		1.主要面对服务器端应用(以短停顿时间为目标,横向对比CMS)
	   		2.把连续的java堆划分为多个大小相等的独立区域(Region),和特殊的Humongous区域存放大对象(超过0.5个Region),ps: Region大小设置(-XX:G1HeapRegionSize),取值1~32MB,2的整数次幂
	   		3.跟踪各个Region里面垃圾堆积的"价值"大小,在后台维护一个优先列表,每次根据设定允许的收集停顿时间(使用参数-XX:MaxGCPauseMillis指定,默认200ms),优先处理回收价值最大的那些Region。
	   		
	   		4.局部基于标记-复制算法,整体基于标记整理算法
	   		工作过程:
	   			1.初始标记:(stop world)
	   			2.并发标记:并行
	   			3.最终标记:(stop world)
	   				原始快照
	   			4.筛选回收:(stop world)
	   				1.根据期望的停顿时间制定回收计划
	   				2.把决定回收的那些Region中存活对象复制到空的Region中,在清理掉整个旧Region
	   				
	   		5.若是回收跟不上分配,垃圾慢慢堆积,最终占满引发Full GC
	   		
	   		6.维护记忆集十分繁琐,并且额外占用很大的堆内存(记忆集和其他内存消耗).
	   		
	   	PS:G1 在大内存应用优于 CMS(通常平衡点6GB左右), 同时G1进步空间大
	   	
		-------------------------------------------------------------
	   	8.Shenandoah收集器
	   		1.同G1一样使用Region,部分回收
	  		2.用连接矩阵的全局数据结构来记录跨Region的引用关系
	  		3.支持并发整理算法
	  		
	  		工作过程:
	  		   1.并发标记
	  			1.初始化标记:(stop world)
	  			2.并发标记	:
	  			3.最终标记	:(stop world)
	  		   2.并发回收
	  			1.并发清理	:
	  			2.并发回收	:
	  				复制存活的对象到新的Region中
	  		   3.并发引用更新:
	  		   	1.初始引用更新:(stop world)
	  		   		只是为了建立线程集合点,确保之前的任务全部完成
	  		   	2.并发引用更新:
	  		   		按内存物理地址线性搜索出引用类型,把旧值改新值
	  		   	3.最终引用更新:(stop world)
	  		   		修正GC Roots中的引用
	  		   	4.并发清理:
	  		   		
	  		PS:并发回收实现原理:
	  			1.转发指针
	  			2.读屏障
	   		
	   		4.效果:
	   			1.停顿时间很短(相较与上文的其他收集器)
	   			2.吞吐量明显下降
	   			
	   	-------------------------------------------------------------		
	   	9.ZGC收集器:(JDK11加入,实验性质)
	   		1.使用3中不同大小的Region,但是不分区,全面回收内存
	   			1.不用使用写屏障
	   		2.使用染色指针技术,实现并发回收
	   			1.在linux和window平台利用多种映射实现
	   			2."指针自愈"
	   				1.Region在更新时可以快速被清理
	   				2.可以不用专门实现引用更新
	   			3.不用使用写屏障
	   			4.可扩展,未来可以用新的用途
	   		3.支持"NUMA-Aware"
	   			多核心环境下吞吐量高
	   		
	   		4.效果:
	   			1.目前最好的收集器,超短的停顿时间(10ms),和不错的吞吐量
	   			2.有很好的发展前景
	   	
		-------------------------------------------------------------
		* Epsilon收集器:(不能回收垃圾的收集器)
			1.仅仅起到 自动内存管理子系统 的作用
			2.是垃圾收集器的最小模式
			3.微服务,无服务,等短时间运行的应用上使用
			
	----------------------------------------------------------------------
	垃圾收集器的选择:
		1.程序的关注点:
			要高吞吐还是低延时
		2.运行应用的基础设施如何:
			适配环境
		3.使用JDK的发行商,版本号:
	----------------------------------------------------------------------
	虚拟机垃圾收集器日志:
	   设置参数:
		-Xlog[:[selector][:[output][:[decorators][:output-options]]]]	
			
	   常用案例:
	   	1.查看GC基本信息:(JDK9后放在后面)
	   		-XX:+PrintGC
	   		-Xlog:Gc
		2.查看GC详细信息:
			-XX:+PrintGCDetails
			-Xlog:gc*
		3.查看GC前后的堆,方法区可用容量变化
			-XX:+PrintHeapAtGc
			-Xlog:gc+heap=debug
		4.查看GC过程中用户线程并发时间以及停顿的时间
			-XX:+PrintGCApplicationConcurrentTime
			-Xlog:safepoint
		5.查看收集器Ergonomics机制自动调节的相关信息
			-XX:+PrintAdaptiveSizePolicy
			-Xlog:gc+ergo*=trace
		6.查看熬过收集器后剩余对象的年龄分布信息
			-XX:+PrintTenuringDistribution
			-Xlog:gc+age=true
=====================================================================
JVM性能监控，故障处理工具：
   基础工具:
	1.jps：虚拟机进程状况工具
	   命令格式：
	   	jps [options] [hostid]
	   主要选项:
	   	-q :只输出LVMID
	   	-m :输出虚拟机进程启动是传递给主类main()函数的参数
	   	-l :输出主类的全名,如果进程执行的是jar包,则输出jar路径
	   	-v :输出虚拟机进程启动时的JVM参数
	   	
	2.jstat:虚拟机统计信息监视工具	
	   命令格式:
	   	jstat [option vmid [interval[s|ms] [count]]]
	   主要选项:
	   	-class :监视类加载,卸载数量,总空间以及类装载锁耗费的时间
	   	-gc	  :监视java堆状况,包括Eden区,2个Survivor区,老年代,永久代等的容量,已用空间,垃圾收集时间合计等消息
	   	-gc...
	   	-compiler:输出即使编译过的方法,耗时等信息
	   	-printcompilation:输出已经被即使编译的方法
	   
	3.jinfo:配置信息工具:
	   命令格式:
	   	jinfo [option] pid
	   -flag name=value :在运行期修改部分参数值(不赋值为查询)
	   -sysyprops
	   
	4.jmap:内存映像工具
	   命令格式:
	   	jmap [option] vmid
	   主要选项:
	   	-dump	:生成java堆转储快照.格式为: -dump:[live,]format=b,file=<filename> live说明是否只dump出存活对象
	   	-finalizerinfo:显示在F-Queue中等待执行的finalize方法的对象(linux和Solaris有效)
	   	-heap	:显示java堆详细信息(linux和Solaris有效)
	   	-histo:显示堆中对象统计信息
	   	-permstat:
	   	-F:强制生成dump快照
	   	
	 5.jhat:虚拟机堆转储快照分析工具
	 
	 6.jstack:java堆栈跟踪工具
	    命令格式:
	 	jstack [option] vmid
	    主要选项:
	    	-F	:强制输出线程堆栈
	    	-l	:除堆栈外,显示关于锁的附加信息
	    	-m	:如果调用到本地方法的话,可以显示c/c++的堆栈
	    	
	    PS:JDK5之后, Thread类新增getAllStackTraces()方法,可以获取虚拟机中所有线程的StackTraceElement对象
--------------------------------------------------------------------
   可视化故障处理工具:
   	JHSDB:基于服务性代理的调试工具
   	.
   	.
   	.
   	
   	
   	
   	
=====================================================================
类文件结构:
	0—3	：CAFE BABE 魔数
	4-5	：次版本号
	6-7	：主版本号
	8	：常量池入口（空着）
	9	：常量池入口（常量池容量计数器，从1开始计数）
	*常量表集合:
	CONSTANT_info
	{
	u1	：tag	项目
	index / info内容
	...
	}	//字符串最长65535，64kb大小
	...
	
	u2	：access_flags	访问标志
	u2	：this_class	类索引
	u2	：super_class	父索引
	
	u2	：interfaces_count	接口计数器
	u2	：interface
	...
	
	u2	：fields_count	字段计数器
	字段表集合:
	{
	u2	：access_flags	访问标志
	u2	：name_index	简单名称 	的索引（常量池中）
	u2	：descript_index描述符 		的索引（常量池中）
	
	u2	：attributes_count
	attribute_info{}
	}...

	
	u2	: method_count	方法计数器
	方法表集合
	{
	u2	：access_flags	访问标志
	u2	：name_index	简单名称 	的索引（常量池中）
	u2	：descript_index描述符 		的索引（常量池中）
	
	u2	：attributes_count
	attribute_info
	{
	u2	：attribute_name_index	属性名	的索引（常量池中）
	u4	：attribute_length		属性值长度
	u1	: info					长度为attribute_length的任意结构
	...
	}
	...
	}
	...
	
	
PS：描述符（字符串）
	1.字段的描述符：
		【[】数据类型
	2.方法的描述符：
		（参数列表的数据类型）返回值
	
Ps：attribute_info
	{
	u2	：attribute_name_index	属性名	的索引（指向CONSTANT_Utf8_info型常量）
	u4	：attribute_length		属性值长度
	u1	: info					长度为attribute_length的任意结构
	...
	}
	
	常用属性：
		1.Code属性：
		u2：attribute_name_index	"Code"的索引
		{
		u2：attribute_length		属性长度
		u4：max_stack				最大操作栈深度
		u2：max_locals				局部变量所需的存储空间(单位:slot 变量槽)
		u4：code_length				字节码指令长度(实际只能使用u2大小)
		{
		u1：code					字节码指令
		}...
		u2：exception_table_length			异常表长度
		{
		u2：start_pc		字节码抓取范围的起始行
		u2：end_pc							最后行
		u2：handler_pc		发生异常后跳转的处理行
		u2：catch_type		要抓取异常	的索引（CONSTANT_Class_info）
		}...
		u2				：attributes_count	内部属性表长度
		{
		attribute_info	：attributes		内部属性表
		}...
		}
		
		ps：所有非静态方法默认有一个this参数
		
		2.Exceptions属性：
		u2：attribute_name_index	指向"xceptions"的索引
		u4：attribute_length		属性长度
		u2：attribute_of_exceptions	异常个数
		u2：exception_index_table	异常类型
		...
		
		3.LineNumberTable属性：
		用于描述java源码行号与字节码行号（字节码的偏移量）之间的关系
		u2：attribute_name_index
		u4：attribute_length
		u2：line_number_table_length
		{
		u2：start_pc	字节码行号
		u2：line_number	java源码行号
		}...
		
		4.LocalVariableTable及LocalVariableTypeTable属性
		描述栈帧中局部变量表的变量的变量 与 java源码中定义的变量之间的关系
		
		5.SourceFile及SourceDebugExtension属性
		用于记录生成这个Class文件的源码文件名称
		
		6.ConstantValue属性
		通知虚拟机自动为静态变量赋值
		
		7.InnerClasses属性
		记录内部类与宿主类之间的关联
		
		8.Deprecated及Synthetic属性
		Deprecated，表示不推荐使用的类或方法或者字段
		Synthetic，表示此字段或者方法并不是由java源码直接产生的
		ps：attribute_length必须等于0；
		
		9.StackMapTable属性
		位于Code属性的属性表中，在虚拟机类加载的字节码验证阶段被新类型检查验证器使用，
		目的在于代替以前比较消耗性能的基于数据流分析的累类型推到验证器。
		
		10.Signature属性：
		可以出现于类，字段和方法表结构的属性表中，用于记录泛型签名信息
		
		11.BootstrapMethods属性
		用于保存invokedynamic指令引用的引导方法限定符
		
		12.MethodParameters属性
		用来记录方法的各个形参名称和信息（jdk8之后出现，有利于程序的传播和二次利用）
	
		13.模块化相关属性：
		
		14.运行时注解相关属性：
			1.RuntimeVisibleAnnotations
			2.RunTimeInvisibleAnnotations
			3.RuntimeVisibleParameterAnnotations
			4.RunTimeInvisibleParameterAnnotations
			5.RuntimeVisibleTypeAnnotations
			6.RunTimeInvisibleTypeAnnotations
			
			RunTimevisibleAnnotations属性结构：
			u2：attribute_name_index	注解类型名缩影(指向Utf8)
			u4：attribute_length		属性值长度
			u2：num_annotations			注解数量
			{
			u2：Type_index				注解名的索引 （指向Utf8）
			u2：num_element_value_pairs	数组计数器
			element_value_pairs			键值对
			...
			}
			...
   	
   	字节码指令简介:(T:数据类型 b，c，s，i，l，f，d，a)
		1.加载和存储指令:
			1.将局部变量加载到操作栈：
				Tload	（支持32位以上的数据类型）
			2.将一个数值从操作数栈储存到局部变量表：
				Tstore	（支持32位以上的数据类型）
			3.将一个常量加载到操作数栈：
				1.Tipush		（b，s）
				2.ldc
					ldc_w ,	ldc2_w
				3.Tconst_<T>	（i，l，f，d）
					aconst_null	, iconst_ml
			4.扩充局部变量表的访问索引的指令：
				wide
				
		2.运算指令：
			1.加法指令：
				Tadd	（i，l，f，d）
			2.减法指令：
				sub		（i，l，f，d）
			3.乘法指令：
				mul		（i，l，f，d）
			4.除法指令：
				Tdiv	（i，l，f，d）
			5.求余指令：
				Trem	（i，l，f，d）
			6.取反指令：
				Tneg	（i，l，f，d）
			7.位移指令：
				Tshl,Tshr,Tushr,（i，l）
			8.按位或指令：
				Tor		（i，l）
			9.按位于指令：
				Tand	（i，l）
			10.按位异或指令：
				Txor	（i，l）
			11.局部变量自增指令：
				iinc
			12.比较指令：
				Tcmpg,Tcmpl	（f，d）,lcmp
			
		类型转换指令：
			1.自动宽化类型转换（精度不变）：
				int  -> long, float, double
				long -> float, double
				float-> double
			2.强制类型转换指令
				T2T
				
				1.整数窄化时，去高位，同时可能会有符号问题
				2.浮点数窄化为整数时，向零取整，然后向0方向取最接近的值（无符号问题）
					NAN -> 0
				3.double -> float
					1. 向最接近数舍入模式舍入，
						1.float可以表示
						2.float无法表示
							1.得到float的正或负 0
							2.得到float的正或负无穷大
					double的NAN -> float的NAN
					
		对象创建与访问指令：
			1.创建类实例的指令：new
			2.创建数组的指令  ：newarray，anewarray，multianewarray
			3.访问类字段	  ：getfield，putfield，getstatic，putstatic
			4.把一个数组元素加载到操作数栈
				Taload	（b,c,s,i,l,f,d,a）
			5.将一个操作数栈的值储存到数组元素中
				Tastore	（b,c,s,i,l,f,d,a）
			6.去数组长度的指令：arraylength
			7.检查类实例类型的指令：instanceod， checkcast
		
		操作数栈管理指令：
			1.将操作数栈的栈顶一个或者两个元素出栈：
				pop， pop2
			2.复制栈顶一个或者两个数值并将复制值或者双份的复制值重新压入栈顶
				dup_x1, dup2_x1, dup_x2, dump2_x2
			3.将栈最顶端的两个数值互换：
				swap
		
		控制转移指令
			1.条件分支：
				ifeq，iflt，ifle，ifne，ifge，ifnull，ifnonnull，if_icmpeq...
			2.复合条件分支
				tableswitch，lookupswitch
			3.无条件分支
				goto，goto_w，jsr，jsr_w，ret
				
		方法调用和返回指令：
			1.invokevirtual指令：用于调用对象的实例方法。
			2.invokeinterface指令：用于调用接口方法，运行时搜索一个实现了这个接口方法的对象
			3.invokespecial指令：用于调用一些需要特殊处理的实例方法，（初始化方法，私有方法，父类方法）
			4.invokestatic指令：用于调用静态方法
			5.invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法
			
			返回指令：
				1.Treturn	（i，l，f，d，a）
				2.return：
					用与void方法，实例初始化方法，类和接口的类初始化方法
					
		异常处理指令：
			athrow指令：显示抛出异常指令
			还有一些异常java虚拟机会自动抛出
			
		同步指令：
			monitorenter：以栈顶元素为锁，开始同步
			monitorexit：退出同步
			