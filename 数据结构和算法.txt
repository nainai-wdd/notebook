二分查找：
public int find(int result, int[] collection){
	int left = 0;
	int right = end;
	int mid;
	while (left < right) {
		mid = (left + right) >>> 1;		//左中位数
		if(collection[mid] == result)
			return mid;
		if (collection[mid] < result)
			left = mid + 1;				//从左逼近
		else
			right = mid;
	}
	return left;						/若无，则返回临近值（左逼近返回ceiling，右逼近返回floor）
}
=====================================================================
sort：排序
	1.选择排序：
		1.选择 2.交换到正确的位置
		时间复杂度:
			1.与输入无关,平均N + N²/2
			2.O(n²)	
			
	2.插入排序:
		1.使序列逐步有序
		2.子序列长度加一，新增元素
		3.使新元素插入正确的位置(冒泡)，新序列排序完成
		4.重复2.3
		时间复杂度:
			1.和输入的有序程度成正比,平均N²/2 ,最好N-1 ,最坏N²
			2.O(n²)
			
	3.shell：希尔排序:
		*是插入排序对长序列的优化算法
		1.把一个序列分为h组有序序列(每个序列的步长为h)
		2.对h组序列进行插入排序，实现h有序数组
		3.缩小h，重复1,2步骤，直到h = 1；

		时间复杂度：
			1.时间复杂度与h组成的递增序列有关，
				ps：常用递增序列：h = 3*h + 1；O(n^3/2)
			2.小于O(n²)
			
	4.merge：归并排序
		0.类似于后序遍历,左右都处理好了才执行合并
		1.sort左
		2.sort右
		3.merge(a, lo, mid, hi)
			mid左边一个有序列，右边一个有序列，比较两个有序列的最小值，依次放入目标数组
			int i = head, j = mid+1;
			for (int k = i; k < rear+1; k++){
				if (i > mid){ a[k] = aux[j]; j++; }
				else if (j > rear){ a[k] = aux[i]; i++; }
				else if (aux[i].compareTo(aux[j]) < 0){ a[k] = aux[i]; i++; }
				else { a[k] = aux[j]; j++;}
			}
		实现：
			1.自顶向下（递归）
				更快，我自己推荐用这个，也好优化
				
			2.自底向上（循环）
				简单，
		优化：
			1.对小规模使用插入排序
			2.检查数组是否已经有序
				if(a[mid].compareTo(a[mid + 1]) <= 0) continue;
			3.辅助数组和目标数组每层互换角色，避免每次都要把元素复制到辅助数组中
			
	5.quick：快排
		0.类似于先序遍历，把元素排成大小两个子序列，然后再排子序列，直到所有元素都被排好
		1.partition（a,lo,hi）
			private static int partition(Comparable[] a, int lo, int hi){
				int lt = lo, gt = hi+1;
				Comparable v = a[lo];
				while(true){
					while ( less(a[++lt],v)) if (lt == hi) break;
					while ( less(v,a[--gt])) ;
					if (lt >= gt) break;
					exch(a,lt,gt);
				}
				exch(a,lo,gt);
				return gt;
			}
		2.sort左
		3.sort右
		优化：
			1.对小规模使用insertSort
			2.三取样切分，得到更好的切分，若hi设置为取样最大值，则可以省略 lt的边界条件；
			3.对于有大量重复元素的序列，使用三向切分的快速排序
				1.顺序遍历（指针i），大的放最右边（指针gt），小的放最左边（指针lt），相等的不移动处于指针lt和i之间
				2.好处：[lt，gt]之间的不用排序
				3.坏处：交换次数变多
		
=====================================================================
优先队列：
	二叉堆实现：
		时间复杂度：插入log(N) 弹出堆顶元素log(N)
	1.用数组维护一个二叉堆,
		为了方便计算索引，一般不使用0号位置，或者在0号位置放置哨兵
	2.关键算法：
		sink()
		swim()
	3.插入：插到堆底，对堆底元素调用sink()
	4.弹出：
		1.堆顶元素和堆底元素互换，
		2.弹出堆底元素
		3.对堆顶元素调用swim()
	
=====================================================================
二叉树遍历非递归遍历
	先序遍历：
	1.利用辅助栈实现
		while（T || !stack.isEmpty）{
			while（T){
				stack.push(T);
				sout(pop);	// 访问位置
				T = T.left;
			}
			pop = stack.pop();
			pop = pop.right;
		}
	
	中序遍历：
	1.利用辅助栈实现
		while（T || !stack.isEmpty）{
			while（T){
				stack.push(T);
				T = T.left;
			}
			pop = stack.pop();
			sout(pop);	// 访问位置
			pop = pop.right;
		}
	2.右线索化+回溯
		1.若当前树的根节点p有左孩子且未被线索化：将其左孩子的最右结点（可为左孩子本身）指向p，即右线索化，然后p = p->lChild；
		2.若p有左孩子但已被线索化，说明该p是回溯上来的，即左孩子已经被访问了，则释放线索化的指针；
		3.若p无左孩子，打印p，向上回溯(即p = p->rChild）
	
	后序遍历：
	1.利用两个辅助栈：
		先序遍历的顺序是根节点-左儿子-右儿子，故只需将先序遍历的左右调换并把访问方式打印改为压入另一个栈即可
	2.利用辅助栈实现：
		在右子树返回时才访问，因此需要设置一个指示器显示当前节点是否是从右节点返回
		例如：
		增加一个变量Prev记录当前节点Curr的上一个节点。

	　　　　若Prev为空(Curr节点是根节点)或者Prev是Curr的父节点，将Curr节点的左孩子和右孩子分别压入栈；
	　　　　若Prev是Curr的左儿子，则将Curr的右儿子压入栈；
	　　　　否则Prev是Curr的右儿子，访问Curr;
	
	while（!stack.isEmpty）{
		curr = stack.peek;
		if(prev == null || prev.left == curr || prev.right == curr){
			if(curr.left != null)
				stack.push(curr);
			if(curr.right != null)
				stack.push(curr);
		}
		else if(curr.left == prev){
			if(curr.right)
				stack.push(curr);
		}
		else{
			sout(curr);		//访问节点
			stack.pop();
		}
		prev = curr;
	}
	
	层序遍历：
	1.利用辅助队列：
	queue.add(curr);
	while(!queue.isEmpty){
		curr = queue.remove();
		sout(curr);
		if(curr.left != null)
			queue.add(curr.left);
		if(curr.right != null)
			queue.add(curr.right);
	}
	
================================================================
union—find 算法
	API：
				UF(int N)				初始化N个触点
		void 	union(int p, int q)		连接p，q
		int 	find(int p)				返回p的连通分量标识符
		boolean connected(int p, int q)	p，q在同一个连通分量则true
		int 	count()					连通分量的数量
		
	quick-find：基本不用，效率太低
		为相互连通的触点设置相同id，id[]
		
	qucik-union：基本用加权的
		1.用parent[]记录当前索引代表的触点直接连接的一个触点(父触点)
		2.同一连通分量的触点连接在同一个根触点
		PS：1.像是一个只能从子节点找到父节点的树
			2.由于连接的方式固定，可能会导致树不平衡（不断长高）
			
	加权的qucik-union：
		1.使用int[] sz 记录各个根节点所对应的分量大小
		2.根据分量大小，总是把分量小的根连接到分量大的根上
		PS：一定程度上保证了树不会过高，数高等于max（log count， 最高子树数高）
		
		例子:
		public void union(int p, int q){
			int i1 = find(p);
			int i2 = find(q);
			if(i1 > i2){
				parent[i2] = i1;
				sz[i2]++;
			}
			else{
				parent[i1] = i2;
				sz[i1]++;
			}
		}
		
	路径压缩的加权quick-union：最优算法
		1.在find()中添加一个循环,根据不同策略压缩路径(扁平化)
		常用策略:路径减半压缩
		public int find(int p) {
			validate(p);
			while (p != parent[p]) {
				parent[p] = parent[parent[p]];    // path compression by halving
				p = parent[p];
			}
			return p;
		}
		
================================================================
无向图：
	Graph：
		API：
		*Graph()				初始化无向图
		*addEdge(int p, int q)	增加一条边
		*adj(int v)				返回与v直接相连的节点
		*V()					返回总节点数
		*E()					返回总边数
		*degree(int v)			返回v的度				
	
	解决类：
	单点的连通性：DepthFirstSearch
		1.dfs遍历连通的节点
		
	单点路径：DepthFirstPaths
		1.dfs遍历节点时，
		2.用int[]记录每个节点的父节点（上一个节点）
		
	单点最短路经：BreadthFirstPaths	
		1.bfs遍历节点时，
		2.用int[]记录每个节点的父节点（上一个节点）
		
	连通性：CC
		1.对所有节点进行dfs遍历，
		2.同一次遍历的节点属于同一个连通域（遍历时用int[]记录每个节点所处域的标识符）
		
	检测环：Cycle
		1.对所有节点进行dfs遍历，并且设置int[] path 记录路径
		2.若遍历到已访问节点，则说明有环
		3.把环的路径记录下来（Stack）
	双色问题（图的二分性）：TwoColor
		1.对所有节点进行dfs遍历，并且设置boolean[] color 记录颜色
		2.遍历时设置当前节点的颜色为父节点颜色取反
		3.若遍历到已访问，且节点颜色和当前节点相同，则不是二分图，指示器设置false
---------------------------------------------------------------------------------
符号图：SymbolGraph 
	private Map<String, Integer> st;
	private String[] keys;
	private Graph G;
	
	API：
	SymbolGraph()				利用构造函数，预处理得到st，keys，G（读两遍图）
	boolean contains(String s)	图中是否包含s字符节点
	int 	index(String s)		获取字符对应的整型
	String 	name(int v)			获取整型对应的字符
	Graph 	G()					获取对应的整型图
---------------------------------------------------------------------------------
有向图：Digraph
	API基本与无向图相同，
	多一个Digraph reverse（）	获取该图的反向图
	
	解决类：
	单点和多点的可达性：DirectedDFS
		dfs（）遍历。
	单点有向路径
		1.dfs（）遍历
		2.用int[] path记录每个节点的父节点
	单点最短有向路径
		1.bfs（）遍历
		2.用int[] path记录每个节点的父节点
	有向环检测
		1.对所有节点进行dfs遍历，并且设置int[] path 记录路径
		2.用boolean[] onStack 记录遍历时压入栈中的节点（入栈设为true，出栈设为false）
		3.若遍历到已访问，且还在栈中的节点，则说明有环
		4.把环的路径记录下来（Stack）
	深度优先的定点排序
		1.dfs遍历节点时，
		2.dfs先序遍历位置，把节点存入pre队列
		3.dfs后序遍历位置，把节点存入post队列
		4.dfs后序遍历位置，把节点存入reversePost堆栈
	优先级限制下的调度问题
		1.创建排序对象，传入图，预处理
		2.从reversePost遍历节点，即为正确的优先顺序
	拓扑排序
		同上
	强连通性
		1.获取反向图的reversePost
		2.对这个reversePost进行dfs遍历
		3.同一次遍历的节点属于同一个连通域（遍历时用int[] id记录连通域标识符）
	顶点对的可达性
		1.创建DirectedDFS[] 预处理所有（g，v）对
		2.调用对应数组元素DirectedDFS的marked
		
---------------------------------------------------------------------------------
最小生成树：
	数据类型：
	1.Edge：带权重的边
		their()
		other(v)
		weight()
	2.EdgeWeightedGraph：加权无向图
		用一个邻接表存储Edge
		
Prim算法：
	将边以贪婪算法的形式，不断连接到已有生成树中，并记录这些边
	
	LazyPrimMST：延迟prim生成最小生成树（通过边的信息来处理）
		boolean[] marked;
		Queue<Edge> mst;
		PriorityQueue<Edge> pq;
		
		1.访问起始顶点，vist（G，v）遍历edge，加入pq
		2.pq弹出other节点未访问过的优先edge，将这个edge加入mst，并标记marked[v] = true;
		3.（vist（G，v））同时遍历other节点的邻接edge，将other节点未访问过的edge加入pq
		4.重复以上
		
		5.时间复杂度ElogE，空间复杂度E
		
	PrimMST：即时prim生成最小生成树（通过节点信息来处理）
		boolean[] marked;		记录是否被访问
		Edge[] edgeTo;			未加入节点连接到已有生成树最小权重所对应的边，加入后即为最小生成树的边
		double[] distTo;		未加入节点连接到已有生成树的最小权重，加入后即为加入时边的权重
		IndexMinPQ<Double> pq;	用来存储节点对应权重的优先队列，索引代表节点，值为权重
		
		1.将distTo[0] = 0.0 加入pq的0索引位置；
		2.弹出一个权重，获取其索引（顶点号 v）
		3.vist（G，v）marked[v] = true, 遍历这个邻接edge，获取被访问过的 w = other(v) 
		根据 distTo[w] > edge.weight()  给edgeTo[]，distTo[]赋值，更新或插入 pq 
		4.重复2，3；
		
		5.时间复杂度ElogV，空间复杂度V
		
Kruskal算法：
	将边以贪婪算法的形式，直接加入MST中
	
	KruskalMST：
		Queue<Edge> mst;	存储最小生成树的边
		Proirity<Edge> pq;	整理所有边优先级的队列
		
		1.将所有边加入优先队列
		2.弹出优先的edge，获取其v,w两个节点，
		3.利用UF算法，判断v,w是否已经连通，
		4.连通则跳过，未连通则将其连通，并将边加入mst
		
---------------------------------------------------------------------------------
最短路径：
	